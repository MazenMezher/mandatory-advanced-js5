{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TG\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Dropbox } from \"dropbox\";\nimport LeftNav from \"./LeftNav\";\nimport Folders from \"./Folders\";\nimport RightNav from \"./RightNav\";\nimport Header from './Header';\nimport '../Css/icons.css';\nimport '../Css/mainFiles.css';\nimport '../Css/nav.css';\nimport '../Css/UlItems.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setFolderState = newFolder => {\n      this.setState({\n        folder: newFolder\n      });\n    };\n\n    this.setFileState = newFile => {\n      this.setState({\n        file: newFile\n      });\n    };\n\n    this.copy = (original_path, your_path) => {\n      let real_path = original_path.split('/');\n      real_path = `/${real_path[real_path.length - 1]}`;\n      this.dbx.filesCopy({\n        from_path: original_path,\n        to_path: `${your_path}${real_path}`,\n        autorename: true\n      });\n    };\n\n    this.search_FOLDERS_FILES = e => {\n      let resFolder;\n      this.setState({\n        searchQuery: e.target.value\n      });\n\n      if (e.target.value.length === 0) {\n        return;\n      }\n\n      this.dbx.filesSearch({\n        path: '',\n        query: e.target.value\n      }).then(res => {\n        resFolder = res;\n        let entries = res.matches.map(x => x.metadata);\n        this.setState({\n          folders: entries\n        });\n        entries = entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        });\n      }).then(res => {\n        const files = resFolder.matches.filter(x => x.metadata[\".tag\"] !== \"folder\").map(x => {\n          const th = res.entries.find(y => y.metadata && y.metadata.id === x.metadata.id);\n          return {\n            metadata: x.metadata,\n            \".tag\": \"success\",\n            thumbnail: th ? th.thumbnail : null\n          };\n        });\n        this.setState({\n          files: files\n        });\n      });\n    };\n\n    this.state = {\n      folders: [],\n      files: [],\n      starArray: [],\n      changes: false,\n      searchQuery: \"\"\n    };\n    this.renameRef = React.createRef();\n  } // vi skickar den som props till Folders.js som sedan hämtar data och vi sparar den data här i state\n\n\n  // Den renderar ut våra filer och folders\n  componentDidMount() {\n    this.setState({\n      starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\n    });\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    let path = \"\";\n\n    if (this.props.match.params.path) {\n      path = `/${this.props.match.params.path}`;\n    }\n\n    this.dbx.filesListFolder({\n      path: path\n    }).then(resFolder => {\n      this.dbx.filesListFolderLongpoll({\n        cursor: resFolder.cursor\n      }).then(response => {\n        this.setState({\n          changes: response.changes\n        });\n      });\n      const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n        path: x.path_display\n      }));\n      return this.dbx.filesGetThumbnailBatch({\n        entries: entries\n      }).then(res => {\n        const files = resFolder.entries.filter(x => x[\".tag\"] !== \"folder\").map(x => {\n          const th = res.entries.find(y => y.metadata && y.metadata.id === x.id);\n          return {\n            metadata: x,\n            \".tag\": \"success\",\n            thumbnail: th ? th.thumbnail : null\n          };\n        });\n        this.setState({\n          files: files,\n          folders: resFolder.entries\n        });\n      });\n    });\n  } // den renderar våra filer och folders. Om vår url, dropbox innehåll och search funktion ändras\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.changes || this.props.match.params.path !== prevProps.match.params.path || this.state.searchQuery === \"\" && prevState.searchQuery !== this.state.searchQuery) {\n      let path = \"\";\n\n      if (this.props.match.params.path) {\n        path = `/${this.props.match.params.path}`;\n      }\n\n      this.dbx.filesListFolder({\n        path: path\n      }).then(resFolder => {\n        this.dbx.filesListFolderLongpoll({\n          cursor: resFolder.cursor\n        }).then(response => this.setState({\n          changes: response.changes\n        }));\n        const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        }).then(res => {\n          const files = resFolder.entries.filter(x => x[\".tag\"] !== \"folder\").map(x => {\n            const th = res.entries.find(y => y.metadata && y.metadata.id === x.id);\n            return {\n              metadata: x,\n              \".tag\": \"success\",\n              thumbnail: th ? th.thumbnail : null\n            };\n          });\n          this.setState({\n            files: files,\n            folders: resFolder.entries,\n            changes: false\n          });\n        });\n      });\n    }\n  } // denna funktionen gör så att när vi har sökt något så renderar den ut de vi har sökt, beroende om de är filer eller folders\n\n\n  // här visas allt innehåll på sidan\n  render() {\n    const {\n      folders,\n      files\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(LeftNav, {\n      dbx: this.dbx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bigBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Header, {\n      search_FOLDERS_FILES: this.search_FOLDERS_FILES,\n      path: this.props.match.params.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Folders, {\n      dbx: this.dbx,\n      files: files,\n      renameFiles: this.renameFiles,\n      updateFileName: this.updateFileName,\n      copy: this.copy,\n      renameFolders: this.renameFolders,\n      updateFolderName: this.updateFolderName,\n      folders: folders,\n      onDelete: this.onDelete,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(RightNav, {\n      path: this.props.match.params.path,\n      files: files,\n      folders: folders,\n      dbx: this.dbx,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/TG/Desktop/mandatory-advanced-js5/src/Components/Main.js"],"names":["React","Component","Dropbox","LeftNav","Folders","RightNav","Header","Main","constructor","props","setFolderState","newFolder","setState","folder","setFileState","newFile","file","copy","original_path","your_path","real_path","split","length","dbx","filesCopy","from_path","to_path","autorename","search_FOLDERS_FILES","e","resFolder","searchQuery","target","value","filesSearch","path","query","then","res","entries","matches","map","x","metadata","folders","filter","path_display","filesGetThumbnailBatch","files","th","find","y","id","thumbnail","state","starArray","changes","renameRef","createRef","componentDidMount","JSON","parse","window","localStorage","getItem","accessToken","match","params","filesListFolder","filesListFolderLongpoll","cursor","response","componentDidUpdate","prevProps","prevState","render","renameFiles","updateFileName","renameFolders","updateFolderName","onDelete"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Dropbox } from \"dropbox\";\nimport LeftNav from \"./LeftNav\"\nimport Folders from \"./Folders\"\nimport RightNav from \"./RightNav\"\nimport Header from './Header'\n\nimport '../Css/icons.css'\nimport '../Css/mainFiles.css'\nimport '../Css/nav.css'\nimport '../Css/UlItems.css'\n\nclass Main extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n          folders: [],\n          files: [],\n          starArray: [],\n\n          changes: false,\n          searchQuery: \"\"\n        }\n        this.renameRef = React.createRef();\n    }\n\n    // vi skickar den som props till Folders.js som sedan hämtar data och vi sparar den data här i state\n    setFolderState = (newFolder) =>{\n      this.setState({folder: newFolder})\n    }\n\n    // vi skickar den som props till Folders.js som sedan hämtar data och vi sparar den data här i state\n    setFileState = (newFile) =>{\n      this.setState({file: newFile})\n    }\n\n    // funktionen kopierar filer och folders!\n    copy = (original_path, your_path) =>{\n      let real_path = original_path.split('/')\n      real_path = `/${real_path[real_path.length-1]}`\n      this.dbx.filesCopy({\n        from_path: original_path,\n        to_path: `${your_path}${real_path}`,\n        autorename: true,\n      })\n    }\n\n    // Den renderar ut våra filer och folders\n    componentDidMount() {\n      this.setState({\n        starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\n      });\n\n      this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\n      let path = \"\"\n\n      if(this.props.match.params.path){\n        path = `/${this.props.match.params.path}`\n      }\n\n      this.dbx.filesListFolder({ path: path })\n      .then((resFolder) => {\n        this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\n        .then(response => {\n          this.setState({changes: response.changes})\n        })\n\n        const entries = resFolder.entries\n          .filter(x => x[\".tag\"] === \"file\")\n          .map((x) => ({ path: x.path_display }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries,\n        })\n        .then((res) => {\n          const files = resFolder.entries\n            .filter(x => x[\".tag\"] !== \"folder\")\n            .map(x => {\n              const th = res.entries.find(y => y.metadata && y.metadata.id === x.id);\n\n              return {\n                metadata: x,\n                \".tag\": \"success\",\n                thumbnail: th ? th.thumbnail : null,\n              }\n            });\n\n          this.setState({ files: files, folders: resFolder.entries});\n        })\n      })\n    }\n\n    // den renderar våra filer och folders. Om vår url, dropbox innehåll och search funktion ändras\n    componentDidUpdate(prevProps, prevState) {\n      if (this.state.changes || this.props.match.params.path !== prevProps.match.params.path || (this.state.searchQuery === \"\" && (prevState.searchQuery !== this.state.searchQuery))) {\n\n        let path = \"\"\n        if(this.props.match.params.path){\n          path = `/${this.props.match.params.path}`\n        }\n        this.dbx.filesListFolder({ path: path })\n        .then((resFolder) => {\n\n          this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\n          .then(response => this.setState({changes: response.changes}))\n\n          const entries = resFolder.entries\n            .filter(x => x[\".tag\"] === \"file\")\n            .map((x) => ({ path: x.path_display }));\n          return this.dbx.filesGetThumbnailBatch({\n            entries: entries,\n          })\n          .then((res) => {\n            const files = resFolder.entries\n            .filter(x => x[\".tag\"] !== \"folder\")\n            .map(x => {\n              const th = res.entries.find(y => y.metadata && y.metadata.id === x.id);\n\n              return {\n                metadata: x,\n                \".tag\": \"success\",\n                thumbnail: th ? th.thumbnail : null,\n              }\n            });\n            this.setState({ files: files, folders: resFolder.entries, changes:false });\n          })\n        })\n    }\n  }\n\n  // denna funktionen gör så att när vi har sökt något så renderar den ut de vi har sökt, beroende om de är filer eller folders\n  search_FOLDERS_FILES = (e) => {\n    let resFolder;\n\n    this.setState({ searchQuery: e.target.value });\n\n    if (e.target.value.length === 0) {\n      return;\n    }\n\n    this.dbx.filesSearch({ path: '' , query: e.target.value})\n    .then(res => {\n\n      resFolder = res;\n      let entries = res.matches.map(x => x.metadata);\n\n      this.setState({ folders: entries });\n      entries = entries\n        .filter(x => x[\".tag\"] === \"file\")\n        .map((x) => ({ path: x.path_display }));\n      return this.dbx.filesGetThumbnailBatch({\n        entries: entries,\n      });\n      })\n      .then((res) => {\n        const files = resFolder.matches\n        .filter(x => x.metadata[\".tag\"] !== \"folder\")\n        .map(x => {\n          const th = res.entries.find(y => y.metadata && y.metadata.id === x.metadata.id);\n\n          return {\n            metadata: x.metadata,\n            \".tag\": \"success\",\n            thumbnail: th ? th.thumbnail : null,\n          }\n        });\n        this.setState({ files: files });\n      });\n  }\n\n  // här visas allt innehåll på sidan\n    render() {\n      const { folders, files } = this.state;\n\n        return (\n          <div className=\"App\" >\n          <LeftNav dbx={this.dbx}/>\n        <div className={\"bigBox\"}>\n          <Header search_FOLDERS_FILES={this.search_FOLDERS_FILES} path={this.props.match.params.path}/>\n          <main>\n            <Folders dbx={this.dbx} files={files} renameFiles={this.renameFiles} updateFileName={this.updateFileName} copy={this.copy}\n            renameFolders={this.renameFolders} updateFolderName={this.updateFolderName} folders={folders} onDelete={this.onDelete}  setFileState={this.setFileState} setFolderState={this.setFolderState}/>\n            <RightNav path={this.props.match.params.path} files={files} folders={folders} dbx={this.dbx} setFileState={this.setFileState} setFolderState={this.setFolderState} />\n          </main>\n        </div>\n    </div>\n      )\n    }\n  }\n\nexport default Main"]},"metadata":{},"sourceType":"module"}