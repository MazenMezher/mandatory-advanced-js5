{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Dropbox } from \"dropbox\";\nimport LogOut from './LogOut';\nimport LeftNav from \"./LeftNav\";\nimport Folders from \"./Folders\";\nimport RightNav from \"./RightNav\";\nimport Header from './Header';\nimport '../Css/icons.css';\nimport '../Css/mainFiles.css';\nimport '../Css/nav.css';\nimport '../Css/UlItems.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setFolderState = newFolder => {\n      this.setState({\n        folder: newFolder\n      });\n    };\n\n    this.setFileState = newFile => {\n      this.setState({\n        file: newFile\n      });\n    };\n\n    this.updateFolderName = e => {\n      this.setState({\n        folderRename: e.target.value\n      });\n    };\n\n    this.updateFileName = e => {\n      this.setState({\n        fileRename: e.target.value\n      });\n    };\n\n    this.onDelete = (path_delete, tag) => {\n      if (tag === 'folder') {\n        const {\n          folders\n        } = this.state;\n        this.dbx.filesDelete({\n          path: path_delete\n        }).then(response => {\n          let newFolder = folders.filter(folder => folder.name !== response.name);\n          this.setState({\n            folders: newFolder\n          });\n        });\n      } else {\n        const {\n          files\n        } = this.state;\n        this.dbx.filesDelete({\n          path: path_delete\n        }).then(response => {\n          let newFiles = files.filter(files => {\n            if (files['.tag'] === 'failure') {\n              return null;\n            } else {\n              return files.metadata.name !== response.name;\n            }\n          });\n          this.setState({\n            files: newFiles\n          });\n        });\n      }\n    };\n\n    this.search_FOLDERS_FILES = e => {\n      this.dbx.filesSearch({\n        path: '',\n        query: e.target.value\n      }).then(res => {\n        let entries = res.matches.map(x => x.metadata);\n        this.setState({\n          folders: entries\n        });\n        entries = entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        });\n      }).then(res => {\n        this.setState({\n          files: res.entries\n        });\n      });\n    };\n\n    this.renameFolders = (path, id) => {\n      const newName = this.state.folderRename;\n      this.dbx.filesMoveV2({\n        \"from_path\": path,\n        \"to_path\": `/${newName}`\n      }).then(res => {\n        const newFolders = [...this.state.folders];\n        const idx = newFolders.findIndex(x => x.id === id);\n        newFolders[idx] = res.metadata;\n        this.setState({\n          folders: newFolders\n        });\n      });\n    };\n\n    this.renameFiles = (path, id) => {\n      const newName = this.state.fileRename;\n      let splitPath = path.split(\".\");\n      let fileType = splitPath[1];\n      this.dbx.filesMoveV2({\n        \"from_path\": path,\n        \"to_path\": `/${newName}.${fileType}`\n      }).then(res => {\n        const newFiles = [...this.state.files];\n        const idx = newFiles.findIndex(x => {\n          if (x['.tag'] === 'failure') {\n            return null;\n          } else {\n            return x.metadata.id === id;\n          }\n        });\n        newFiles[idx] = res.metadata;\n        this.setState({\n          files: newFiles\n        });\n      });\n    };\n\n    this.state = {\n      folders: [],\n      files: [],\n      folderRename: '',\n      fileRename: '',\n      changes: false,\n      starArray: []\n    };\n    this.renameRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\n    });\n    let log = JSON.parse(window.localStorage.getItem(\"favorites\"));\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    let path = \"\";\n\n    if (this.props.match.params.path) {\n      path = `/${this.props.match.params.path}`;\n    }\n\n    this.dbx.filesListFolder({\n      path: path\n    }).then(resFolder => {\n      console.log(resFolder);\n      this.dbx.filesListFolderLongpoll({\n        cursor: resFolder.cursor\n      }).then(response => {\n        console.log('lol');\n        this.setState({\n          changes: true\n        });\n      });\n      const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n        path: x.path_display\n      }));\n      return this.dbx.filesGetThumbnailBatch({\n        entries: entries\n      }).then(res => {\n        this.setState({\n          files: res.entries,\n          folders: resFolder.entries\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.changes) {\n      console.log('lol');\n      let path = \"\";\n\n      if (this.props.match.params.path) {\n        path = `/${this.props.match.params.path}`;\n      }\n\n      this.dbx.filesListFolder({\n        path: path\n      }).then(resFolder => {\n        this.dbx.filesListFolderLongpoll({\n          cursor: resFolder.cursor\n        }).then(response => this.setState({\n          changes: true\n        }));\n        const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        }).then(res => {\n          this.setState({\n            files: res.entries,\n            folders: resFolder.entries,\n            changes: false\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    // let favFiles = this.state.starArray.map(favfile => {\n    //   let fileName\n    //   let datum\n    //   let date_input\n    //   let size\n    //   let newSize\n    //   let i\n    //   console.log(favfile)\n    //   fileName = favfile.metadata.name;\n    //   size = favfile.metadata.size;\n    //     i = Math.floor(Math.log(size) / Math.log(1024));\n    //     newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i]\n    //   date_input = new Date((favfile.metadata.client_modified));\n    //   datum = new Date(date_input).toDateString();\n    //   console.log(favfile);\n    //   let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\n    //     return (\n    //       <tr>\n    //         <td>\n    //           <div >\n    //             <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\n    //             <a onClick={() => this.downloadFile(favfile.metadata.path_display)} href={this.state.URL} download={fileName} className=\"favfile\" key={favfile.id}> <br /> {favfile.metadata.name} {\" Latest change: \" + datum} { \" Filesize: \" + newSize} </a>\n    //             <input className=\"checkbox\" type=\"checkbox\"  id={favfile.id} onClick={this.starFile.bind(this, favfile)} />\n    //       </div>\n    //       </td>\n    //       </tr>\n    //     )\n    //   // }\n    //   })\n    const {\n      folders,\n      files\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(LeftNav, {\n      dbx: this.dbx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bigBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(Header, {\n      search_FOLDERS_FILES: this.search_FOLDERS_FILES,\n      path: this.props.match.params.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(Folders, {\n      dbx: this.dbx,\n      files: files,\n      renameFiles: this.renameFiles,\n      updateFileName: this.updateFileName,\n      renameFolders: this.renameFolders,\n      updateFolderName: this.updateFolderName,\n      folders: folders,\n      onDelete: this.onDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(RightNav, {\n      path: this.props.match.params.path,\n      files: files,\n      folders: folders,\n      dbx: this.dbx,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/Main.js"],"names":["React","Component","Dropbox","LogOut","LeftNav","Folders","RightNav","Header","Main","constructor","props","setFolderState","newFolder","setState","folder","setFileState","newFile","file","updateFolderName","e","folderRename","target","value","updateFileName","fileRename","onDelete","path_delete","tag","folders","state","dbx","filesDelete","path","then","response","filter","name","files","newFiles","metadata","search_FOLDERS_FILES","filesSearch","query","res","entries","matches","map","x","path_display","filesGetThumbnailBatch","renameFolders","id","newName","filesMoveV2","newFolders","idx","findIndex","renameFiles","splitPath","split","fileType","changes","starArray","renameRef","createRef","componentDidMount","JSON","parse","window","localStorage","getItem","log","accessToken","match","params","filesListFolder","resFolder","console","filesListFolderLongpoll","cursor","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Dropbox } from \"dropbox\";\r\nimport LogOut from './LogOut'\r\nimport LeftNav from \"./LeftNav\"\r\nimport Folders from \"./Folders\"\r\nimport RightNav from \"./RightNav\"\r\nimport Header from './Header'\r\n\r\nimport '../Css/icons.css'\r\nimport '../Css/mainFiles.css'\r\nimport '../Css/nav.css'\r\nimport '../Css/UlItems.css'\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n          folders: [],\r\n          files: [],\r\n\r\n          folderRename: '',\r\n          fileRename: '',\r\n          changes: false,\r\n\r\n          starArray: [],\r\n\r\n        }\r\n        this.renameRef = React.createRef();\r\n    }\r\n    setFolderState = (newFolder) =>{\r\n      this.setState({folder: newFolder})\r\n    }\r\n    setFileState = (newFile) =>{\r\n      this.setState({file: newFile})\r\n    }\r\n\r\n    updateFolderName = e => {\r\n      this.setState({ folderRename: e.target.value });\r\n    }\r\n\r\n    updateFileName = e => {\r\n      this.setState({ fileRename: e.target.value });\r\n    }\r\n\r\n    // delets files and closes delete window\r\n    onDelete = (path_delete, tag) =>{\r\n      if(tag === 'folder'){\r\n      const{folders} = this.state\r\n      this.dbx.filesDelete({path: path_delete})\r\n      .then(response =>{\r\n        let newFolder = folders.filter( folder => folder.name !== response.name)\r\n        this.setState({folders: newFolder })\r\n      })\r\n    }else{\r\n      const{files} = this.state\r\n      this.dbx.filesDelete({path: path_delete})\r\n      .then(response =>{\r\n        let newFiles = files.filter( files => {\r\n          if (files['.tag'] === 'failure') {\r\n            return null;\r\n          }\r\n          else {\r\n            return files.metadata.name !== response.name;\r\n          }\r\n        })\r\n        this.setState({files: newFiles })\r\n      })\r\n    }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n      this.setState({\r\n        starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\r\n      });\r\n        let log = JSON.parse(window.localStorage.getItem(\"favorites\"));\r\n        \r\n      this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n      let path = \"\"\r\n      if(this.props.match.params.path){\r\n        path = `/${this.props.match.params.path}`\r\n      }\r\n      this.dbx.filesListFolder({ path: path })\r\n      .then((resFolder) => {\r\n        console.log(resFolder)\r\n        this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\r\n        .then(response => {\r\n          console.log('lol')\r\n          this.setState({changes: true})\r\n\r\n        })\r\n\r\n        const entries = resFolder.entries\r\n          .filter(x => x[\".tag\"] === \"file\")\r\n          .map((x) => ({ path: x.path_display }));\r\n        return this.dbx.filesGetThumbnailBatch({\r\n          entries: entries,\r\n        })\r\n        .then((res) => {\r\n          this.setState({ files: res.entries, folders: resFolder.entries});\r\n        })\r\n      })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (this.state.changes) {\r\n        console.log('lol')\r\n\r\n        let path = \"\"\r\n        if(this.props.match.params.path){\r\n          path = `/${this.props.match.params.path}`\r\n        }\r\n        this.dbx.filesListFolder({ path: path })\r\n        .then((resFolder) => {\r\n\r\n          this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\r\n          .then(response => this.setState({changes: true}))\r\n\r\n          const entries = resFolder.entries\r\n            .filter(x => x[\".tag\"] === \"file\")\r\n            .map((x) => ({ path: x.path_display }));\r\n          return this.dbx.filesGetThumbnailBatch({\r\n            entries: entries,\r\n          })\r\n          .then((res) => {\r\n            this.setState({ files: res.entries, folders: resFolder.entries, changes:false });\r\n          })\r\n        })\r\n  }\r\n\r\n  }\r\n\r\n  search_FOLDERS_FILES = (e) => {\r\n    this.dbx.filesSearch({ path: '' ,query: e.target.value})\r\n    .then(res => {\r\n      let entries = res.matches.map(x => x.metadata);\r\n\r\n      this.setState({ folders: entries });\r\n      entries = entries\r\n        .filter(x => x[\".tag\"] === \"file\")\r\n        .map((x) => ({ path: x.path_display }));\r\n      return this.dbx.filesGetThumbnailBatch({\r\n        entries: entries,\r\n      });\r\n      })\r\n      .then((res) => {\r\n        this.setState({ files: res.entries });\r\n      });\r\n\r\n  }\r\n\r\n\r\n//   starFile = (file) => {\r\n//      let newStarArray;\r\n//     const { starArray } = this.state;\r\n//     console.log(starArray, file);\r\n//     if(starArray.find(x => x.metadata.id === file.metadata.id)) {\r\n//       newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id)\r\n//     }else {\r\n//       newStarArray = [...this.state.starArray, file];\r\n//     }\r\n\r\n\r\n//     let favorites = JSON.parse(localStorage.getItem('favorites'));\r\n\r\n//     // const newStarArray = [...this.state.starArray, file];\r\n\r\n//     localStorage.setItem('favorites', JSON.stringify(newStarArray));\r\n\r\n\r\n//      this.setState({\r\n//        starArray: newStarArray\r\n//      })\r\n//     console.log(this.state.starArray);\r\n// }\r\n\r\n  renameFolders = (path, id) => {\r\n    const newName = this.state.folderRename;\r\n\r\n    this.dbx.filesMoveV2({\r\n      \"from_path\": path,\r\n      \"to_path\": `/${newName}`,\r\n    })\r\n    .then(res => {\r\n      const newFolders = [...this.state.folders];\r\n      const idx = newFolders.findIndex(x => x.id === id);\r\n      newFolders[idx] = res.metadata;\r\n\r\n      this.setState({ folders: newFolders });\r\n\r\n    })\r\n  }\r\n\r\n  renameFiles = (path, id) => {\r\n    const newName = this.state.fileRename;\r\n\r\n    let splitPath = path.split(\".\")\r\n    let fileType = splitPath[1];\r\n\r\n    this.dbx.filesMoveV2({\r\n      \"from_path\": path,\r\n      \"to_path\": `/${newName}.${fileType}`,\r\n    })\r\n    .then(res => {\r\n      const newFiles = [...this.state.files];\r\n      const idx = newFiles.findIndex(x => {\r\n        if (x['.tag'] === 'failure') {\r\n          return null\r\n        }\r\n        else {\r\n          return x.metadata.id === id;\r\n        }\r\n      })\r\n\r\n      newFiles[idx] = res.metadata;\r\n\r\n      this.setState({ files: newFiles });\r\n    })\r\n  }\r\n\r\n    render() {\r\n\r\n      // let favFiles = this.state.starArray.map(favfile => {\r\n      //   let fileName\r\n      //   let datum\r\n      //   let date_input\r\n      //   let size\r\n      //   let newSize\r\n      //   let i\r\n      //   console.log(favfile)\r\n      //   fileName = favfile.metadata.name;\r\n      //   size = favfile.metadata.size;\r\n      //     i = Math.floor(Math.log(size) / Math.log(1024));\r\n      //     newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i]\r\n\r\n      //   date_input = new Date((favfile.metadata.client_modified));\r\n      //   datum = new Date(date_input).toDateString();\r\n      //   console.log(favfile);\r\n      //   let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\r\n      //     return (\r\n      //       <tr>\r\n      //         <td>\r\n      //           <div >\r\n      //             <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n      //             <a onClick={() => this.downloadFile(favfile.metadata.path_display)} href={this.state.URL} download={fileName} className=\"favfile\" key={favfile.id}> <br /> {favfile.metadata.name} {\" Latest change: \" + datum} { \" Filesize: \" + newSize} </a>\r\n      //             <input className=\"checkbox\" type=\"checkbox\"  id={favfile.id} onClick={this.starFile.bind(this, favfile)} />\r\n      //       </div>\r\n      //       </td>\r\n      //       </tr>\r\n      //     )\r\n      //   // }\r\n      //   })\r\n\r\n      const { folders, files, } = this.state;\r\n\r\n        return (\r\n          <div className=\"App\" >\r\n\r\n          <LeftNav dbx={this.dbx}/>\r\n        <div className={\"bigBox\"}>\r\n          <Header search_FOLDERS_FILES={this.search_FOLDERS_FILES} path={this.props.match.params.path}/>\r\n          <main>\r\n            <Folders dbx={this.dbx} files={files} renameFiles={this.renameFiles} updateFileName={this.updateFileName}\r\n            renameFolders={this.renameFolders} updateFolderName={this.updateFolderName} folders={folders} onDelete={this.onDelete}/>\r\n            <RightNav path={this.props.match.params.path} files={files} folders={folders} dbx={this.dbx} setFileState={this.setFileState} setFolderState={this.setFolderState} />\r\n          </main>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}