{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TG\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\CopyWindow.js\";\nimport React, { Component, PureComponent } from 'react';\nimport '../Css/filefolder.css';\nimport ReactDom from 'react-dom';\nimport { Dropbox } from \"dropbox\";\nimport CopyFolderList from './CopyFolderList';\nimport folderImg from '../Img/folder-img.png';\n\nclass CopyWindow extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.clickAnotherFolder = path_display => {\n      this.setState({\n        path: path_display\n      });\n    };\n\n    this.copyIntoCurrentFolder = () => {\n      const {\n        path_display,\n        copy,\n        closeCopyWindow\n      } = this.props;\n      copy(path_display, path_display);\n      closeCopyWindow();\n    };\n\n    this.copyIntoSelectedFolder = () => {\n      const {\n        copy,\n        closeCopyWindow,\n        path_display\n      } = this.props;\n      const {\n        path\n      } = this.state;\n      copy(path_display, path);\n      closeCopyWindow();\n    };\n\n    this.goBack = () => {\n      let path = this.state.path.split('/');\n    };\n\n    this.state = {\n      path: \"\",\n      folders: [],\n      routing: []\n    };\n  }\n\n  componentDidMount() {\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    this.dbx.filesListFolder({\n      path: \"\"\n    }).then(response => {\n      this.setState({\n        folders: response.entries.filter(object => object[\".tag\"] === \"folder\")\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.path !== this.state.path) {\n      this.dbx.filesListFolder({\n        path: this.state.path\n      }).then(response => {\n        let pathArray = [];\n        let pathSplit = this.state.path.split('/').filter(path => path !== \"\").reduce((acc, current) => {\n          pathArray.push(acc + `/${current}`);\n          return acc + `/${current}`;\n        }, \"\");\n        this.setState({\n          folders: response.entries.filter(object => object[\".tag\"] === \"folder\"),\n          routing: pathArray\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      folders,\n      path,\n      routing\n    } = this.state;\n    console.log(path);\n    return ReactDom.createPortal(React.createElement(\"div\", {\n      className: \"CopyWindow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"which folder do you want to copy it too?\"), React.createElement(\"div\", {\n      className: \"routeDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"routing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"start>\"), routing.map(route => {\n      let createRoute = route.split('/');\n      return React.createElement(\"span\", {\n        className: \"routing\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, createRoute[createRoute.length - 1], \">\");\n    })), React.createElement(\"ul\", {\n      className: \"selectFolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, folders.map(folder => React.createElement(CopyFolderList, {\n      folder: folder,\n      clickAnotherFolder: this.clickAnotherFolder,\n      copy: this.props.copy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.copyIntoCurrentFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"copy into current folder\"), React.createElement(\"button\", {\n      onClick: this.copyIntoSelectedFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"copy into selected folder\"), React.createElement(\"button\", {\n      onClick: this.props.closeCopyWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Go Back\"), React.createElement(\"button\", {\n      onClick: this.props.closeCopyWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"avbryt\"))), document.querySelector('#CopyWindow'));\n  }\n\n}\n\nexport default CopyWindow;","map":{"version":3,"sources":["C:/Users/TG/Desktop/mandatory-advanced-js5/src/Components/CopyWindow.js"],"names":["React","Component","PureComponent","ReactDom","Dropbox","CopyFolderList","folderImg","CopyWindow","constructor","props","clickAnotherFolder","path_display","setState","path","copyIntoCurrentFolder","copy","closeCopyWindow","copyIntoSelectedFolder","state","goBack","split","folders","routing","componentDidMount","dbx","accessToken","localStorage","getItem","filesListFolder","then","response","entries","filter","object","componentDidUpdate","prevProps","prevState","pathArray","pathSplit","reduce","acc","current","push","render","console","log","createPortal","map","route","createRoute","length","folder","document","querySelector"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react'\r\nimport '../Css/filefolder.css'\r\nimport ReactDom from 'react-dom'\r\nimport { Dropbox } from \"dropbox\";\r\nimport CopyFolderList from './CopyFolderList'\r\nimport folderImg from '../Img/folder-img.png';\r\n\r\nclass CopyWindow extends PureComponent{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      path: \"\",\r\n      folders: [],\r\n      routing: [],\r\n    }\r\n  }\r\n  clickAnotherFolder = (path_display) =>{\r\n    this.setState({path:path_display})\r\n  }\r\n  copyIntoCurrentFolder = () =>{\r\n    const{path_display,copy,closeCopyWindow} = this.props\r\n    copy(path_display,path_display)\r\n    closeCopyWindow()\r\n  }\r\n  copyIntoSelectedFolder = () =>{\r\n    const{copy,closeCopyWindow,path_display} = this.props\r\n    const{path} = this.state\r\n    copy(path_display, path)\r\n    closeCopyWindow()\r\n  }\r\n  goBack = () =>{\r\n    let path = this.state.path.split('/')\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n    this.dbx.filesListFolder({path:\"\"})\r\n    .then(response =>{\r\n      this.setState({folders: response.entries.filter(object => object[\".tag\"] ===\"folder\" )})\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps,prevState){\r\n    if(prevState.path !== this.state.path){\r\n    this.dbx.filesListFolder({path: this.state.path})\r\n    .then(response =>{\r\n      let pathArray = []\r\n      let pathSplit = this.state.path.split('/').filter(path => path !== \"\").reduce((acc, current) =>{\r\n        pathArray.push(acc+`/${current}`)\r\n        return acc+`/${current}`} ,\"\")\r\n      this.setState({folders: response.entries.filter(object => object[\".tag\"] ===\"folder\"),routing: pathArray})\r\n    })\r\n  }\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n  const{folders,path,routing} = this.state\r\n  console.log(path)\r\n  return ReactDom.createPortal(\r\n\r\n  <div className=\"CopyWindow\">\r\n  <div>\r\n  which folder do you want to copy it too?\r\n  </div>\r\n  <div className=\"routeDiv\">\r\n  <span className=\"routing\">start></span>\r\n  {routing.map(route =>{\r\n    let createRoute = route.split('/')\r\n    return <span className=\"routing\">{createRoute[createRoute.length-1]}></span>\r\n  })}\r\n  </div>\r\n  <ul className=\"selectFolder\">\r\n  {folders.map(folder => (\r\n    <CopyFolderList folder={folder} clickAnotherFolder={this.clickAnotherFolder} copy={this.props.copy}/>\r\n\r\n  ))}\r\n  </ul>\r\n  <div>\r\n  <button onClick={this.copyIntoCurrentFolder}>copy into current folder</button>\r\n  <button onClick={this.copyIntoSelectedFolder}>copy into selected folder</button>\r\n  <button onClick={this.props.closeCopyWindow}>Go Back</button>\r\n  <button onClick={this.props.closeCopyWindow}>avbryt</button>\r\n  </div>\r\n\r\n\r\n  </div>\r\n  , document.querySelector('#CopyWindow')\r\n\r\n)\r\n}\r\n}\r\n\r\n\r\n\r\nexport default CopyWindow\r\n"]},"metadata":{},"sourceType":"module"}