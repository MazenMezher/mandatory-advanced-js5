{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\Online\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\CopyWindow.js\";\nimport React, { PureComponent } from 'react';\nimport '../Css/filefolder.css';\nimport ReactDom from 'react-dom';\nimport { Dropbox } from \"dropbox\";\nimport CopyFolderList from './CopyFolderList';\nimport RouterForCopyWindow from './RouterForCopyWindow'; // Denna component renderar ut själva fönstret där man kan välja vilka folder man vill kopiera till\n\nclass CopyWindow extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.clickAnotherFolder = path_display => {\n      this.setState({\n        path: path_display\n      });\n    };\n\n    this.copyIntoSelectedFolder = () => {\n      const {\n        copy,\n        closeCopyWindow,\n        path_display\n      } = this.props;\n      const {\n        path\n      } = this.state;\n      copy(path_display, path);\n      closeCopyWindow();\n    };\n\n    this.goBack = () => {\n      let path = this.state.path.split('/').filter(path => path !== \"\");\n      let newPath = path.reduce((acc, current, idx) => idx !== path.length - 1 ? acc + `/${current}` : acc + \"\", \"\");\n      this.setState({\n        path: newPath\n      });\n    };\n\n    this.onClickRouting = route => {\n      this.setState({\n        path: route\n      });\n    };\n\n    this.onStartClick = () => {\n      this.setState({\n        path: \"\"\n      });\n    };\n\n    this.state = {\n      path: \"\",\n      folders: [],\n      routing: []\n    };\n  }\n\n  componentDidMount() {\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    this.dbx.filesListFolder({\n      path: \"\"\n    }).then(response => {\n      this.setState({\n        folders: response.entries.filter(object => object[\".tag\"] === \"folder\")\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.path !== this.state.path) {\n      this.dbx.filesListFolder({\n        path: this.state.path\n      }).then(response => {\n        let pathArray = [];\n        let pathSplit = this.state.path.split('/').filter(path => path !== \"\").reduce((acc, current) => {\n          pathArray.push(acc + `/${current}`);\n          return acc + `/${current}`;\n        }, \"\");\n        this.setState({\n          folders: response.entries.filter(object => object[\".tag\"] === \"folder\"),\n          routing: pathArray\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      folders,\n      path,\n      routing\n    } = this.state;\n    console.log(path);\n    return ReactDom.createPortal(React.createElement(\"div\", {\n      className: \"CopyWindow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"which folder do you want to copy it too?\"), React.createElement(\"div\", {\n      className: \"routeDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"routing\",\n      onClick: this.onStartClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"start>\"), routing.map(route => React.createElement(RouterForCopyWindow, {\n      route: route,\n      onClickRouting: this.onClickRouting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }))), React.createElement(\"ul\", {\n      className: \"selectFolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, folders.map(folder => React.createElement(CopyFolderList, {\n      folder: folder,\n      clickAnotherFolder: this.clickAnotherFolder,\n      copy: this.props.copy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.copyIntoSelectedFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Copy into the selected folder\"), React.createElement(\"button\", {\n      onClick: this.goBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Go Back\"), React.createElement(\"button\", {\n      onClick: this.props.closeCopyWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Cancel\"))), document.querySelector('#CopyWindow'));\n  }\n\n}\n\nexport default CopyWindow;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/Online/mandatory-advanced-js5/src/Components/CopyWindow.js"],"names":["React","PureComponent","ReactDom","Dropbox","CopyFolderList","RouterForCopyWindow","CopyWindow","constructor","props","clickAnotherFolder","path_display","setState","path","copyIntoSelectedFolder","copy","closeCopyWindow","state","goBack","split","filter","newPath","reduce","acc","current","idx","length","onClickRouting","route","onStartClick","folders","routing","componentDidMount","dbx","accessToken","localStorage","getItem","filesListFolder","then","response","entries","object","componentDidUpdate","prevProps","prevState","pathArray","pathSplit","push","render","console","log","createPortal","map","folder","document","querySelector"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport '../Css/filefolder.css'\r\nimport ReactDom from 'react-dom'\r\nimport { Dropbox } from \"dropbox\";\r\nimport CopyFolderList from './CopyFolderList'\r\nimport RouterForCopyWindow from './RouterForCopyWindow'\r\n\r\n// Denna component renderar ut själva fönstret där man kan välja vilka folder man vill kopiera till\r\nclass CopyWindow extends PureComponent{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      path: \"\",\r\n      folders: [],\r\n      routing: [],\r\n    }\r\n  }\r\n\r\n  clickAnotherFolder = (path_display) =>{\r\n    this.setState({path:path_display})\r\n  }\r\n\r\n  copyIntoSelectedFolder = () =>{\r\n    const{copy,closeCopyWindow,path_display} = this.props\r\n    const{path} = this.state\r\n    copy(path_display, path)\r\n    closeCopyWindow()\r\n  }\r\n\r\n  goBack = () =>{\r\n    let path = this.state.path.split('/').filter(path => path !== \"\")\r\n    let newPath = path.reduce((acc, current, idx ) =>( idx !== path.length-1 ? acc + `/${current}` : acc + \"\") , \"\")\r\n    this.setState({path: newPath})\r\n  }\r\n\r\n  onClickRouting = (route) =>{\r\n    this.setState({path:route})\r\n  }\r\n\r\n  onStartClick = () =>{\r\n    this.setState({path:\"\"})\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n    this.dbx.filesListFolder({path:\"\"})\r\n    .then(response =>{\r\n      this.setState({folders: response.entries.filter(object => object[\".tag\"] ===\"folder\" )})\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps,prevState){\r\n    if(prevState.path !== this.state.path){\r\n    this.dbx.filesListFolder({path: this.state.path})\r\n    .then(response =>{\r\n      let pathArray = []\r\n      let pathSplit = this.state.path.split('/').filter(path => path !== \"\").reduce((acc, current) =>{\r\n        pathArray.push(acc+`/${current}`)\r\n        return acc+`/${current}`} ,\"\")\r\n      this.setState({folders: response.entries.filter(object => object[\".tag\"] ===\"folder\"),routing: pathArray})\r\n    })\r\n  }\r\n  }\r\n\r\n  render(){\r\n  const{folders,path,routing} = this.state\r\n  console.log(path)\r\n  return ReactDom.createPortal(\r\n\r\n  <div className=\"CopyWindow\">\r\n  <div>\r\n  which folder do you want to copy it too?\r\n  </div>\r\n  <div className=\"routeDiv\">\r\n  <span className=\"routing\" onClick={this.onStartClick}>start></span>\r\n  {routing.map(route =>(\r\n    <RouterForCopyWindow route={route} onClickRouting={this.onClickRouting}/>\r\n  ))}\r\n  </div>\r\n  <ul className=\"selectFolder\">\r\n  {folders.map(folder => (\r\n    <CopyFolderList folder={folder} clickAnotherFolder={this.clickAnotherFolder} copy={this.props.copy}/>\r\n  ))}\r\n  </ul>\r\n  <div>\r\n    <button onClick={this.copyIntoSelectedFolder}>Copy into the selected folder</button>\r\n    <button onClick={this.goBack}>Go Back</button>\r\n    <button onClick={this.props.closeCopyWindow}>Cancel</button>\r\n  </div>\r\n\r\n  </div>\r\n  , document.querySelector('#CopyWindow')\r\n\r\n)\r\n}\r\n}\r\n\r\nexport default CopyWindow"]},"metadata":{},"sourceType":"module"}