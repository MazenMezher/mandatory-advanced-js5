{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\DropdownOptions.js\";\nimport React, { Component, PureComponent } from 'react';\nimport '../Css/Options.css';\nimport ClickedOutsideRemover from './ClickedOutsideRemover';\nimport DeleteWindow from './DeleteWindow';\nimport NewName from './NewName';\nimport CopyWindow from './CopyWindow';\n\nclass DropdownOptions extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onDeleteButtonClicked = () => {\n      this.setState({\n        deleteButtonClicked: true\n      });\n    };\n\n    this.onCloseDeleteWindow = () => {\n      this.setState({\n        deleteButtonClicked: false\n      });\n    };\n\n    this.closeOnDelete = () => {\n      this.setState({\n        deleteButtonClicked: false\n      });\n    };\n\n    this.showRename = () => {\n      this.setState({\n        reNameButtonClicked: true\n      });\n    };\n\n    this.closeRenameFolder = () => {\n      this.props.renameFolders(this.props.path, this.props.id);\n      this.setState({\n        reNameButtonClicked: false\n      });\n    };\n\n    this.closeRenameFiles = () => {\n      this.props.renameFiles(this.props.path, this.props.id);\n      this.setState({\n        reNameButtonClicked: false\n      });\n    };\n\n    this.hideRename = () => {\n      this.setState({\n        reNameButtonClicked: false\n      });\n    };\n\n    this.openCopyWindow = () => {\n      this.setState({\n        copyButtonClicked: true\n      });\n    };\n\n    this.makeCopyInSameFolder = () => {\n      this.props.copy(this.props.path_display);\n    };\n\n    this.closeCopyWindow = () => {\n      this.setState({\n        copyButtonClicked: false\n      });\n    };\n\n    this.state = {\n      deleteButtonClicked: false,\n      reNameButtonClicked: false,\n      copyButtonClicked: false\n    };\n  } // Shows the window asking the user if they want to delete\n\n\n  render() {\n    const {\n      onDelete,\n      path,\n      name,\n      id,\n      renameFolders,\n      renameFiles,\n      tag,\n      updateFolderName,\n      updateFileName,\n      copy,\n      path_display\n    } = this.props;\n    const {\n      deleteButtonClicked,\n      reNameButtonClicked,\n      copyButtonClicked\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"...\"), React.createElement(ClickedOutsideRemover, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dropdown-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dropdown-list\",\n      onClick: this.onDeleteButtonClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"div\", {\n      className: \"dropdown-list\",\n      onClick: this.showRename,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"rename\"), React.createElement(\"div\", {\n      className: \"dropdown-list\",\n      onClick: this.openCopyWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"copy\"))), deleteButtonClicked ? React.createElement(DeleteWindow, {\n      onCloseDeleteWindow: this.onCloseDeleteWindow,\n      closeOnDelete: this.closeOnDelete,\n      tag: tag,\n      path: path,\n      onDelete: onDelete,\n      name: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }) : null, reNameButtonClicked ? React.createElement(NewName, {\n      rename: tag === 'folder' ? renameFolders : renameFiles,\n      update: tag === 'folder' ? updateFolderName : updateFileName,\n      closeRename: tag === 'folder' ? this.closeRenameFolder : this.closeRenameFiles,\n      hideRename: this.hideRename,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }) : null, copyButtonClicked ? React.createElement(CopyWindow, {\n      closeCopyWindow: this.closeCopyWindow,\n      makeCopyInSameFolder: this.makeCopyInSameFolder,\n      copy: copy,\n      path_display: path_display,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default DropdownOptions;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/DropdownOptions.js"],"names":["React","Component","PureComponent","ClickedOutsideRemover","DeleteWindow","NewName","CopyWindow","DropdownOptions","constructor","props","onDeleteButtonClicked","setState","deleteButtonClicked","onCloseDeleteWindow","closeOnDelete","showRename","reNameButtonClicked","closeRenameFolder","renameFolders","path","id","closeRenameFiles","renameFiles","hideRename","openCopyWindow","copyButtonClicked","makeCopyInSameFolder","copy","path_display","closeCopyWindow","state","render","onDelete","name","tag","updateFolderName","updateFileName"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react'\r\nimport '../Css/Options.css'\r\nimport ClickedOutsideRemover from './ClickedOutsideRemover'\r\nimport DeleteWindow from './DeleteWindow'\r\nimport NewName from './NewName'\r\nimport CopyWindow from './CopyWindow'\r\n\r\nclass DropdownOptions extends PureComponent{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      deleteButtonClicked: false,\r\n      reNameButtonClicked: false,\r\n      copyButtonClicked:false,\r\n\r\n    }\r\n  }\r\n\r\n  // Shows the window asking the user if they want to delete\r\n  onDeleteButtonClicked = () =>{\r\n    this.setState({deleteButtonClicked: true})\r\n  }\r\n  // closes the delete window if you click avbryt or X\r\n  onCloseDeleteWindow = () =>{\r\n    this.setState({deleteButtonClicked: false})\r\n  }\r\n\r\n  closeOnDelete = () =>{\r\n    this.setState({deleteButtonClicked: false})\r\n  }\r\n  showRename = () =>{\r\n    this.setState({reNameButtonClicked: true})\r\n  }\r\n  closeRenameFolder = () =>{\r\n    this.props.renameFolders(this.props.path,this.props.id)\r\n    this.setState({reNameButtonClicked: false})\r\n  }\r\n  closeRenameFiles = () =>{\r\n    this.props.renameFiles(this.props.path,this.props.id)\r\n    this.setState({reNameButtonClicked: false})\r\n  }\r\n  hideRename = () =>{\r\n    this.setState({reNameButtonClicked: false})\r\n  }\r\n  openCopyWindow = () =>{\r\n    this.setState({copyButtonClicked: true})\r\n  }\r\n  makeCopyInSameFolder = () =>{\r\n    this.props.copy(this.props.path_display)\r\n  }\r\n  closeCopyWindow = () =>{\r\n    this.setState({copyButtonClicked:false})\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n  const{onDelete,path,name,id,renameFolders,renameFiles,tag,updateFolderName,updateFileName,copy,path_display} = this.props\r\n  const{deleteButtonClicked,reNameButtonClicked,copyButtonClicked} = this.state\r\n\r\n  return(\r\n  <>\r\n  <div className=\"dropdown\">\r\n  <span>...</span>\r\n  <ClickedOutsideRemover>\r\n    <div className=\"dropdown-content\">\r\n    <div className=\"dropdown-list\" onClick={this.onDeleteButtonClicked}>delete</div>\r\n    <div className=\"dropdown-list\" onClick={this.showRename}>rename</div>\r\n    <div className=\"dropdown-list\" onClick={this.openCopyWindow}>copy</div>\r\n\r\n    </div>\r\n\r\n  </ClickedOutsideRemover>\r\n  {deleteButtonClicked ?\r\n  <DeleteWindow onCloseDeleteWindow={this.onCloseDeleteWindow} closeOnDelete={this.closeOnDelete} tag={tag} path={path} onDelete={onDelete} name={name}/>\r\n  : null}\r\n  {reNameButtonClicked ? <NewName\r\n     rename={tag === 'folder' ? renameFolders : renameFiles} update={tag === 'folder' ? updateFolderName : updateFileName}\r\n     closeRename={tag === 'folder' ? this.closeRenameFolder : this.closeRenameFiles}\r\n     hideRename = {this.hideRename}\r\n     />\r\n\r\n  : null}\r\n  {copyButtonClicked ?\r\n    <CopyWindow closeCopyWindow={this.closeCopyWindow} makeCopyInSameFolder={this.makeCopyInSameFolder} copy={copy} path_display={path_display}/>\r\n     : null}\r\n\r\n  </div>\r\n  </>\r\n\r\n)}}\r\n\r\n\r\n\r\nexport default DropdownOptions\r\n"]},"metadata":{},"sourceType":"module"}