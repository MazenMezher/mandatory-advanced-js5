{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Dropbox } from \"dropbox\";\nimport { Link } from 'react-router-dom';\nimport LogOut from './LogOut';\nimport '../Css/nav.css';\nimport folderImg from '../Img/folder-img.png';\nimport fileImg from '../Img/file-img.png';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      folders: [],\n      thumbnail: {},\n      files: []\n    };\n  }\n\n  componentDidMount() {\n    const dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    dbx.filesListFolder({\n      path: \"\"\n    }).then(res => {\n      console.log(res.entries);\n      this.setState({\n        folders: res.entries\n      });\n      const entries = res.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n        path: x.path_display\n      }));\n      return dbx.filesGetThumbnailBatch({\n        entries\n      }); // get thumbnails for the current batch of files\n      // dbx.filesGetThumbnailBatch({ \n      //   entries: res.entries.map(function(entry){\n      //     console.log(entry);\n      //       return {\n      //         path: entry.id,\n      //         format : {'.tag': 'jpeg'},\n      //         size: { '.tag': 'w2048h1536'},\n      //         mode: { '.tag': 'strict' }\n      //       }\n      //   })\n      // });\n    }).then(response => {\n      console.log(\"HEJ\", response);\n    }); // get images from image files!\n    // dbx.filesGetThumbnailBatch({\n    //   entries: [{\n    //     path: '/image1.png',\n    //     size: 'w32h32',\n    //     format: 'png'\n    //   }]\n    // })\n    // .then(res => {\n    //   console.log(res);\n    // })\n    // dbx.filesGetThumbnailBatch({\n    //   entries: \n    // })\n    // .then(res => {\n    //   console.log(res);\n    // })\n    // dbx.filesGetThumbnail({\"path\": \"/image1.png\"})\n    // .then(res => {\n    //   // console.log(res);\n    //   this.setState({ thumbnail: res });\n    // })\n  }\n\n  componentDidUpdate() {\n    const {\n      folders,\n      files\n    } = this.state;\n    folders.map(Files => {\n      const type = Files['.tag'];\n\n      if (type === 'file') {// console.log(Files.name);\n      }\n    }); // console.log(files);\n\n    const dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    dbx.filesGetThumbnailBatch({\n      entries: [{\n        path: '/image1.png image-142881.jpg',\n        size: 'w32h32',\n        format: 'png'\n      }]\n    }); // .then(res => console.log(res))\n  }\n\n  render() {\n    const {\n      folders,\n      thumbnail\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sideLeft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Logo\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" Link 1 \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \" Link 7 \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \" Link 3 \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \" Link 1 \"))), React.createElement(\"div\", {\n      className: \"bigBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Search\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(LogOut, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Folder/file name\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, folders.filter(f => f['.tag'] === 'file').map(fl => {// console.log(fl);\n    }), folders.map(folder => {\n      // render img icon to files and folders!\n      const type = folder['.tag'];\n      let fileThumbnail;\n      let folderThumbnail; // type === 'folder' ? folderThumbnail = folderImg : folderThumbnail = fileImg;\n\n      if (type === 'folder') {\n        folderThumbnail = folderImg;\n      } else {\n        folderThumbnail = fileImg; // console.log(folder.path_display);\n\n        let img = folder.path_display;\n        console.log(img);\n        const dbx = new Dropbox({\n          accessToken: localStorage.getItem(\"token\")\n        }); //get images from image files!\n\n        dbx.filesGetThumbnailBatch({\n          entries: [{\n            path: folder.path_display,\n            format: 'png'\n          }]\n        }).then(res => {\n          // console.log(\"HEJ\", res.entries[0]);\n          // folderThumbnail = res.entries[0].thumbnail;\n          // console.log(`data:image/jpeg;base64,${res.entries[0].thumbnail}`);\n          // console.log(res.entries);\n          let x = res.entries;\n          x.map(y => console.log(y.thumbnail)); // fileThumbnail = res.\n        }); // let obj = {};\n        // obj = folder\n        // let arr = [];\n        // let arr2 = [];\n        // arr.push(obj);\n        // arr2.push(arr)\n        // console.log(arr2);\n      } // console.log(folders);\n      // let objectUrl = URL.createObjectURL(thumbnail.fileBlob);\n\n\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: folderThumbnail,\n        style: {\n          height: '42px',\n          width: '42px'\n        },\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(Link, {\n        to: `/folder${folder.path_display}`,\n        style: {\n          border: '1px solid'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, folder.name))));\n    })))), React.createElement(\"div\", {\n      className: \"sidebarRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \" Link 1 \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \" Link 1 \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \" Link 1 \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \" Link 1 \"))))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/Main.js"],"names":["React","Component","Dropbox","Link","LogOut","folderImg","fileImg","Main","constructor","props","state","folders","thumbnail","files","componentDidMount","dbx","accessToken","localStorage","getItem","filesListFolder","path","then","res","console","log","entries","setState","filter","x","map","path_display","filesGetThumbnailBatch","response","componentDidUpdate","Files","type","size","format","render","f","fl","folder","fileThumbnail","folderThumbnail","img","y","display","height","width","border","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { Dropbox } from \"dropbox\";\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport LogOut from './LogOut';\r\n\r\nimport '../Css/nav.css'\r\n\r\nimport folderImg from '../Img/folder-img.png';\r\nimport fileImg from '../Img/file-img.png';\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n          folders: [],\r\n          thumbnail: {},\r\n          files: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n      const dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n      dbx.filesListFolder({ path: \"\" })\r\n        .then((res) => {\r\n          console.log(res.entries);\r\n          this.setState({ folders: res.entries });\r\n\r\n          const entries = res.entries\r\n            .filter(x => x[\".tag\"] === \"file\")\r\n            .map((x) => ({ path: x.path_display }));\r\n\r\n          return dbx.filesGetThumbnailBatch({ entries });\r\n\r\n\r\n      // get thumbnails for the current batch of files\r\n      // dbx.filesGetThumbnailBatch({ \r\n      //   entries: res.entries.map(function(entry){\r\n      //     console.log(entry);\r\n      //       return {\r\n      //         path: entry.id,\r\n      //         format : {'.tag': 'jpeg'},\r\n      //         size: { '.tag': 'w2048h1536'},\r\n      //         mode: { '.tag': 'strict' }\r\n      //       }\r\n      //   })\r\n      // });\r\n        })\r\n        .then((response) => {\r\n          console.log(\"HEJ\", response);\r\n        });\r\n\r\n\r\n        // get images from image files!\r\n        // dbx.filesGetThumbnailBatch({\r\n        //   entries: [{\r\n        //     path: '/image1.png',\r\n        //     size: 'w32h32',\r\n        //     format: 'png'\r\n        //   }]\r\n        // })\r\n        // .then(res => {\r\n        //   console.log(res);\r\n        // })\r\n\r\n        // dbx.filesGetThumbnailBatch({\r\n        //   entries: \r\n        // })\r\n        // .then(res => {\r\n        //   console.log(res);\r\n        // })\r\n\r\n        // dbx.filesGetThumbnail({\"path\": \"/image1.png\"})\r\n        // .then(res => {\r\n        //   // console.log(res);\r\n        //   this.setState({ thumbnail: res });\r\n        // })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const { folders, files } = this.state;\r\n      folders.map(Files => {\r\n        const type = Files['.tag'];\r\n\r\n        if (type === 'file') {\r\n          // console.log(Files.name);\r\n        }\r\n      });\r\n\r\n      // console.log(files);\r\n\r\n      const dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n      dbx.filesGetThumbnailBatch({  \r\n        entries: [{  \r\n          path: '/image1.png image-142881.jpg',  \r\n          size: 'w32h32',  \r\n          format: 'png',  \r\n        }]  \r\n      })\r\n      // .then(res => console.log(res))\r\n    }\r\n\r\n    render() {\r\n      const { folders, thumbnail } = this.state;\r\n\r\n        return (\r\n          <div className=\"App\">\r\n        <div className=\"sideLeft\">\r\n          <div>\r\n            Logo\r\n          </div>\r\n          <ul>\r\n            <li> Link 1 </li>\r\n            <li> Link 7 </li>\r\n            <li> Link 3 </li>\r\n            <li> Link 1 </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className={\"bigBox\"}>\r\n          <header>\r\n            <input placeholder=\"Search\" type=\"text\" />\r\n            <LogOut />\r\n          </header>\r\n\r\n          <main>\r\n          <div className=\"files\">\r\n                <table>\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Folder/file name</th>\r\n                      </tr>\r\n                  </thead>\r\n\r\n                  <tbody>\r\n                    {folders.filter(f => f['.tag'] === 'file').map(fl =>{\r\n                      // console.log(fl);\r\n                    })\r\n                    }\r\n\r\n\r\n                    {folders.map(folder => {\r\n                      // render img icon to files and folders!\r\n                      const type = folder['.tag'];\r\n                      let fileThumbnail\r\n                      let folderThumbnail\r\n                      // type === 'folder' ? folderThumbnail = folderImg : folderThumbnail = fileImg;\r\n\r\n                      if (type === 'folder') {\r\n                        folderThumbnail = folderImg;\r\n                      }\r\n                      else {\r\n                        folderThumbnail = fileImg;\r\n                        // console.log(folder.path_display);\r\n\r\n                        let img = folder.path_display;\r\n\r\n                        console.log(img);\r\n\r\n                        const dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n\r\n                        //get images from image files!\r\n                        dbx.filesGetThumbnailBatch({\r\n                          entries: [{\r\n                            path: folder.path_display,\r\n                            format: 'png'\r\n                          }]\r\n                        })\r\n                        .then(res => {\r\n                          // console.log(\"HEJ\", res.entries[0]);\r\n                          // folderThumbnail = res.entries[0].thumbnail;\r\n                          // console.log(`data:image/jpeg;base64,${res.entries[0].thumbnail}`);\r\n                          // console.log(res.entries);\r\n                          let x = res.entries;\r\n                          x.map(y => console.log(y.thumbnail));\r\n                          // fileThumbnail = res.\r\n                        })\r\n\r\n                        // let obj = {};\r\n                        // obj = folder\r\n\r\n                        // let arr = [];\r\n                        // let arr2 = [];\r\n\r\n                        // arr.push(obj);\r\n                        // arr2.push(arr)\r\n\r\n                        // console.log(arr2);\r\n                      }\r\n\r\n\r\n\r\n                      \r\n\r\n                      // console.log(folders);\r\n\r\n                      // let objectUrl = URL.createObjectURL(thumbnail.fileBlob);\r\n                      return (\r\n                        <tr>\r\n                          <div style={{ display: 'flex' }}>\r\n                              <img src={folderThumbnail} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n                            <Link to={`/folder${folder.path_display}`} style={{ border: '1px solid' }}>\r\n                                <td>{folder.name}</td>\r\n                            </Link>\r\n                          </div>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <div className=\"sidebarRight\">\r\n            <ul>\r\n                <li> Link 1 </li>\r\n                <li> Link 1 </li>\r\n                <li> Link 1 </li>\r\n                <li> Link 1 </li>\r\n            </ul>\r\n            </div>\r\n          </main>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}