{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TG\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\CopyWindow.js\";\nimport React, { PureComponent } from 'react';\nimport '../Css/filefolder.css';\nimport ReactDom from 'react-dom';\nimport { Dropbox } from \"dropbox\";\nimport CopyFolderList from './CopyFolderList';\nimport RouterForCopyWindow from './RouterForCopyWindow'; // Denna component renderar ut själva fönstret där man kan välja vilka folder man vill kopiera till\n\nclass CopyWindow extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.clickAnotherFolder = path_display => {\n      this.setState({\n        path: path_display\n      });\n    };\n\n    this.copyIntoCurrentFolder = () => {\n      const {\n        path_display,\n        copy,\n        closeCopyWindow\n      } = this.props;\n      let newPath = path_display.split('/').filter(path => path !== \"\").pop();\n      newPath = newPath.reduce((acc, current) => acc + `/${current}`, \"\");\n      copy(path_display, newPath);\n      closeCopyWindow();\n    };\n\n    this.copyIntoSelectedFolder = () => {\n      const {\n        copy,\n        closeCopyWindow,\n        path_display\n      } = this.props;\n      const {\n        path\n      } = this.state;\n      copy(path_display, path);\n      closeCopyWindow();\n    };\n\n    this.goBack = () => {\n      let path = this.state.path.split('/').filter(path => path !== \"\");\n      let newPath = path.reduce((acc, current, idx) => idx !== path.length - 1 ? acc + `/${current}` : acc + \"\", \"\");\n      this.setState({\n        path: newPath\n      });\n    };\n\n    this.onClickRouting = route => {\n      this.setState({\n        path: route\n      });\n    };\n\n    this.onStartClick = () => {\n      this.setState({\n        path: \"\"\n      });\n    };\n\n    this.state = {\n      path: \"\",\n      folders: [],\n      routing: []\n    };\n  }\n\n  componentDidMount() {\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    this.dbx.filesListFolder({\n      path: \"\"\n    }).then(response => {\n      this.setState({\n        folders: response.entries.filter(object => object[\".tag\"] === \"folder\")\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.path !== this.state.path) {\n      this.dbx.filesListFolder({\n        path: this.state.path\n      }).then(response => {\n        let pathArray = [];\n        let pathSplit = this.state.path.split('/').filter(path => path !== \"\").reduce((acc, current) => {\n          pathArray.push(acc + `/${current}`);\n          return acc + `/${current}`;\n        }, \"\");\n        this.setState({\n          folders: response.entries.filter(object => object[\".tag\"] === \"folder\"),\n          routing: pathArray\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      folders,\n      path,\n      routing\n    } = this.state;\n    console.log(path);\n    return ReactDom.createPortal(React.createElement(\"div\", {\n      className: \"CopyWindow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"which folder do you want to copy it too?\"), React.createElement(\"div\", {\n      className: \"routeDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"routing\",\n      onClick: this.onStartClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"start>\"), routing.map(route => React.createElement(RouterForCopyWindow, {\n      route: route,\n      onClickRouting: this.onClickRouting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))), React.createElement(\"ul\", {\n      className: \"selectFolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, folders.map(folder => React.createElement(CopyFolderList, {\n      folder: folder,\n      clickAnotherFolder: this.clickAnotherFolder,\n      copy: this.props.copy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.copyIntoCurrentFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Copy into current folder\"), React.createElement(\"button\", {\n      onClick: this.copyIntoSelectedFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Copy into selected folder\"), React.createElement(\"button\", {\n      onClick: this.goBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Go Back\"), React.createElement(\"button\", {\n      onClick: this.props.closeCopyWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Cancel\"))), document.querySelector('#CopyWindow'));\n  }\n\n}\n\nexport default CopyWindow;","map":{"version":3,"sources":["C:/Users/TG/Desktop/mandatory-advanced-js5/src/Components/CopyWindow.js"],"names":["React","PureComponent","ReactDom","Dropbox","CopyFolderList","RouterForCopyWindow","CopyWindow","constructor","props","clickAnotherFolder","path_display","setState","path","copyIntoCurrentFolder","copy","closeCopyWindow","newPath","split","filter","pop","reduce","acc","current","copyIntoSelectedFolder","state","goBack","idx","length","onClickRouting","route","onStartClick","folders","routing","componentDidMount","dbx","accessToken","localStorage","getItem","filesListFolder","then","response","entries","object","componentDidUpdate","prevProps","prevState","pathArray","pathSplit","push","render","console","log","createPortal","map","folder","document","querySelector"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport '../Css/filefolder.css'\nimport ReactDom from 'react-dom'\nimport { Dropbox } from \"dropbox\";\nimport CopyFolderList from './CopyFolderList'\nimport RouterForCopyWindow from './RouterForCopyWindow'\n\n// Denna component renderar ut själva fönstret där man kan välja vilka folder man vill kopiera till\nclass CopyWindow extends PureComponent{\n  constructor(props){\n    super(props)\n    this.state = {\n      path: \"\",\n      folders: [],\n      routing: [],\n    }\n  }\n\n  clickAnotherFolder = (path_display) =>{\n    this.setState({path:path_display})\n  }\n\n  copyIntoCurrentFolder = () =>{\n    const{path_display,copy,closeCopyWindow} = this.props\n    let newPath = path_display.split('/').filter(path => path !== \"\").pop()\n    newPath = newPath.reduce((acc,current) => (acc + `/${current}`),\"\")\n    copy(path_display,newPath)\n    closeCopyWindow()\n  }\n\n  copyIntoSelectedFolder = () =>{\n    const{copy,closeCopyWindow,path_display} = this.props\n    const{path} = this.state\n    copy(path_display, path)\n    closeCopyWindow()\n  }\n\n  goBack = () =>{\n    let path = this.state.path.split('/').filter(path => path !== \"\")\n    let newPath = path.reduce((acc, current, idx ) =>( idx !== path.length-1 ? acc + `/${current}` : acc + \"\") , \"\")\n    this.setState({path: newPath})\n  }\n\n  onClickRouting = (route) =>{\n    this.setState({path:route})\n  }\n\n  onStartClick = () =>{\n    this.setState({path:\"\"})\n  }\n\n  componentDidMount(){\n    this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\n    this.dbx.filesListFolder({path:\"\"})\n    .then(response =>{\n      this.setState({folders: response.entries.filter(object => object[\".tag\"] ===\"folder\" )})\n    })\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if(prevState.path !== this.state.path){\n    this.dbx.filesListFolder({path: this.state.path})\n    .then(response =>{\n      let pathArray = []\n      let pathSplit = this.state.path.split('/').filter(path => path !== \"\").reduce((acc, current) =>{\n        pathArray.push(acc+`/${current}`)\n        return acc+`/${current}`} ,\"\")\n      this.setState({folders: response.entries.filter(object => object[\".tag\"] ===\"folder\"),routing: pathArray})\n    })\n  }\n  }\n\n  render(){\n  const{folders,path,routing} = this.state\n  console.log(path)\n  return ReactDom.createPortal(\n\n  <div className=\"CopyWindow\">\n  <div>\n  which folder do you want to copy it too?\n  </div>\n  <div className=\"routeDiv\">\n  <span className=\"routing\" onClick={this.onStartClick}>start></span>\n  {routing.map(route =>(\n    <RouterForCopyWindow route={route} onClickRouting={this.onClickRouting}/>\n  ))}\n  </div>\n  <ul className=\"selectFolder\">\n  {folders.map(folder => (\n    <CopyFolderList folder={folder} clickAnotherFolder={this.clickAnotherFolder} copy={this.props.copy}/>\n  ))}\n  </ul>\n  <div>\n    <button onClick={this.copyIntoCurrentFolder}>Copy into current folder</button>\n    <button onClick={this.copyIntoSelectedFolder}>Copy into selected folder</button>\n    <button onClick={this.goBack}>Go Back</button>\n    <button onClick={this.props.closeCopyWindow}>Cancel</button>\n  </div>\n\n  </div>\n  , document.querySelector('#CopyWindow')\n\n)\n}\n}\n\nexport default CopyWindow\n"]},"metadata":{},"sourceType":"module"}