{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Dropbox } from \"dropbox\";\nimport LogOut from './LogOut';\nimport LeftNav from \"./LeftNav\";\nimport Folders from \"./Folders\";\nimport RightNav from \"./RightNav\";\nimport Header from './Header';\nimport { Redirect } from 'react-router-dom';\nimport '../Css/icons.css';\nimport '../Css/mainFiles.css';\nimport '../Css/nav.css';\nimport '../Css/UlItems.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setFolderState = newFolder => {\n      this.setState({\n        folder: newFolder\n      });\n    };\n\n    this.setFileState = newFile => {\n      this.setState({\n        file: newFile\n      });\n    };\n\n    this.copy = (original_path, your_path) => {\n      this.dbx.filesCopy({\n        from_path: original_path,\n        to_path: your_path,\n        autorename: true\n      });\n    };\n\n    this.search_FOLDERS_FILES = e => {\n      let search;\n      this.dbx.filesSearch({\n        path: '',\n        query: \"/\"\n      }).then(res => {\n        console.log(res);\n        let entries = res.matches.map(x => x.metadata);\n        this.setState({\n          folders: entries\n        });\n        entries = entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        });\n      }).then(res => {\n        this.setState({\n          files: res.entries\n        });\n      });\n    };\n\n    this.state = {\n      folders: [],\n      files: [],\n      changes: false,\n      starArray: []\n    };\n    this.renameRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\n    });\n    let log = JSON.parse(window.localStorage.getItem(\"favorites\"));\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    let path = \"\";\n\n    if (this.props.match.params.path) {\n      path = `/${this.props.match.params.path}`;\n    }\n\n    this.dbx.filesListFolder({\n      path: path\n    }).then(resFolder => {\n      console.log(resFolder);\n      this.dbx.filesListFolderLongpoll({\n        cursor: resFolder.cursor\n      }).then(response => {\n        console.log('lol');\n        this.setState({\n          changes: true\n        });\n      });\n      const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n        path: x.path_display\n      }));\n      return this.dbx.filesGetThumbnailBatch({\n        entries: entries\n      }).then(res => {\n        const files = resFolder.entries.filter(x => x[\".tag\"] !== \"folder\").map(x => {\n          const th = res.entries.find(y => y.metadata && y.metadata.id === x.id);\n          return {\n            metadata: x,\n            \".tag\": \"success\",\n            thumbnail: th ? th.thumbnail : null\n          };\n        });\n        this.setState({\n          files: files,\n          folders: resFolder.entries\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.changes || this.props.match.params.path !== prevProps.match.params.path) {\n      console.log('lol');\n      let path = \"\";\n\n      if (this.props.match.params.path) {\n        path = `/${this.props.match.params.path}`;\n      }\n\n      this.dbx.filesListFolder({\n        path: path\n      }).then(resFolder => {\n        this.dbx.filesListFolderLongpoll({\n          cursor: resFolder.cursor\n        }).then(response => this.setState({\n          changes: true\n        }));\n        const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        }).then(res => {\n          const files = res.entries;\n          this.setState({\n            files: files,\n            folders: resFolder.entries,\n            changes: false\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      folders,\n      files\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(LeftNav, {\n      dbx: this.dbx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bigBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Header, {\n      search_FOLDERS_FILES: this.search_FOLDERS_FILES,\n      path: this.props.match.params.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Folders, {\n      dbx: this.dbx,\n      files: files,\n      renameFiles: this.renameFiles,\n      updateFileName: this.updateFileName,\n      copy: this.copy,\n      renameFolders: this.renameFolders,\n      updateFolderName: this.updateFolderName,\n      folders: folders,\n      onDelete: this.onDelete,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(RightNav, {\n      path: this.props.match.params.path,\n      files: files,\n      folders: folders,\n      dbx: this.dbx,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/Main.js"],"names":["React","Component","Dropbox","LogOut","LeftNav","Folders","RightNav","Header","Redirect","Main","constructor","props","setFolderState","newFolder","setState","folder","setFileState","newFile","file","copy","original_path","your_path","dbx","filesCopy","from_path","to_path","autorename","search_FOLDERS_FILES","e","search","filesSearch","path","query","then","res","console","log","entries","matches","map","x","metadata","folders","filter","path_display","filesGetThumbnailBatch","files","state","changes","starArray","renameRef","createRef","componentDidMount","JSON","parse","window","localStorage","getItem","accessToken","match","params","filesListFolder","resFolder","filesListFolderLongpoll","cursor","response","th","find","y","id","thumbnail","componentDidUpdate","prevProps","prevState","render","renameFiles","updateFileName","renameFolders","updateFolderName","onDelete"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Dropbox } from \"dropbox\";\r\nimport LogOut from './LogOut'\r\nimport LeftNav from \"./LeftNav\"\r\nimport Folders from \"./Folders\"\r\nimport RightNav from \"./RightNav\"\r\nimport Header from './Header'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport '../Css/icons.css'\r\nimport '../Css/mainFiles.css'\r\nimport '../Css/nav.css'\r\nimport '../Css/UlItems.css'\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n          folders: [],\r\n          files: [],\r\n\r\n          changes: false,\r\n\r\n          starArray: [],\r\n\r\n        }\r\n        this.renameRef = React.createRef();\r\n    }\r\n    setFolderState = (newFolder) =>{\r\n      this.setState({folder: newFolder})\r\n    }\r\n    setFileState = (newFile) =>{\r\n      this.setState({file: newFile})\r\n    }\r\n\r\n\r\n\r\n    copy = (original_path, your_path) =>{\r\n\r\n      this.dbx.filesCopy({\r\n        from_path: original_path,\r\n        to_path: your_path,\r\n        autorename: true,\r\n      })\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\r\n      });\r\n        let log = JSON.parse(window.localStorage.getItem(\"favorites\"));\r\n\r\n      this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n      let path = \"\"\r\n\r\n      if(this.props.match.params.path){\r\n        path = `/${this.props.match.params.path}`\r\n      }\r\n      this.dbx.filesListFolder({ path: path })\r\n      .then((resFolder) => {\r\n        console.log(resFolder)\r\n        this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\r\n        .then(response => {\r\n          console.log('lol')\r\n          this.setState({changes: true})\r\n\r\n        })\r\n\r\n        const entries = resFolder.entries\r\n          .filter(x => x[\".tag\"] === \"file\")\r\n          .map((x) => ({ path: x.path_display }));\r\n        return this.dbx.filesGetThumbnailBatch({\r\n          entries: entries,\r\n        })\r\n        .then((res) => {\r\n          const files = resFolder.entries\r\n            .filter(x => x[\".tag\"] !== \"folder\")\r\n            .map(x => {\r\n              const th = res.entries.find(y => y.metadata && y.metadata.id === x.id);\r\n\r\n              return {\r\n                metadata: x,\r\n                \".tag\": \"success\",\r\n                thumbnail: th ? th.thumbnail : null,\r\n              }\r\n            });\r\n\r\n          this.setState({ files: files, folders: resFolder.entries});\r\n        })\r\n      })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (this.state.changes || this.props.match.params.path !== prevProps.match.params.path) {\r\n        console.log('lol')\r\n\r\n        let path = \"\"\r\n        if(this.props.match.params.path){\r\n          path = `/${this.props.match.params.path}`\r\n        }\r\n        this.dbx.filesListFolder({ path: path })\r\n        .then((resFolder) => {\r\n\r\n          this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\r\n          .then(response => this.setState({changes: true}))\r\n\r\n          const entries = resFolder.entries\r\n            .filter(x => x[\".tag\"] === \"file\")\r\n            .map((x) => ({ path: x.path_display }));\r\n          return this.dbx.filesGetThumbnailBatch({\r\n            entries: entries,\r\n          })\r\n          .then((res) => {\r\n            const files = res.entries;\r\n            this.setState({ files: files, folders: resFolder.entries, changes:false });\r\n          })\r\n        })\r\n  }\r\n\r\n  }\r\n\r\n  search_FOLDERS_FILES = (e) => {\r\n    let search\r\n    \r\n    this.dbx.filesSearch({ path: '' , query: \"/\"})\r\n    .then(res => {\r\n      console.log(res)\r\n      let entries = res.matches.map(x => x.metadata);\r\n\r\n      this.setState({ folders: entries });\r\n      entries = entries\r\n        .filter(x => x[\".tag\"] === \"file\")\r\n        .map((x) => ({ path: x.path_display }));\r\n      return this.dbx.filesGetThumbnailBatch({\r\n        entries: entries,\r\n      });\r\n      })\r\n      .then((res) => {\r\n        this.setState({ files: res.entries });\r\n      });\r\n    \r\n    \r\n  }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n      const { folders, files } = this.state;\r\n\r\n        return (\r\n          <div className=\"App\" >\r\n\r\n          <LeftNav dbx={this.dbx}/>\r\n        <div className={\"bigBox\"}>\r\n          <Header search_FOLDERS_FILES={this.search_FOLDERS_FILES} path={this.props.match.params.path}/>\r\n          <main>\r\n            <Folders dbx={this.dbx} files={files} renameFiles={this.renameFiles} updateFileName={this.updateFileName} copy={this.copy}\r\n            renameFolders={this.renameFolders} updateFolderName={this.updateFolderName} folders={folders} onDelete={this.onDelete}  setFileState={this.setFileState} setFolderState={this.setFolderState}/>\r\n            <RightNav path={this.props.match.params.path} files={files} folders={folders} dbx={this.dbx} setFileState={this.setFileState} setFolderState={this.setFolderState} />\r\n          </main>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}