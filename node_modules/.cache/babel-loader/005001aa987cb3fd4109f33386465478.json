{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Dropbox } from \"dropbox\";\nimport LogOut from './LogOut';\nimport LeftNav from \"./LeftNav\";\nimport Folders from \"./Folders\";\nimport RightNav from \"./RightNav\";\nimport Header from './Header';\nimport '../Css/icons.css';\nimport '../Css/mainFiles.css';\nimport '../Css/nav.css';\nimport '../Css/UlItems.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setFolderState = newFolder => {\n      this.setState({\n        folder: newFolder\n      });\n    };\n\n    this.setFileState = newFile => {\n      this.setState({\n        file: newFile\n      });\n    };\n\n    this.copy = (original_path, your_path) => {\n      let url;\n\n      if (this.props.match.params.path) {\n        url = this.props.match.params.path;\n      }\n\n      this.dbx.filesCopy({\n        from_path: original_path,\n        to_path: your_path,\n        autorename: true\n      });\n    };\n\n    this.search_FOLDERS_FILES = e => {\n      this.dbx.filesSearch({\n        path: '',\n        query: e.target.value\n      }).then(res => {\n        let entries = res.matches.map(x => x.metadata);\n        this.setState({\n          folders: entries\n        });\n        entries = entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        });\n      }).then(res => {\n        this.setState({\n          files: res.entries\n        });\n      });\n    };\n\n    this.state = {\n      folders: [],\n      files: [],\n      changes: false,\n      starArray: []\n    };\n    this.renameRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\n    });\n    let log = JSON.parse(window.localStorage.getItem(\"favorites\"));\n    this.dbx = new Dropbox({\n      accessToken: localStorage.getItem(\"token\")\n    });\n    let path = \"\";\n\n    if (this.props.match.params.path) {\n      path = `/${this.props.match.params.path}`;\n    }\n\n    this.dbx.filesListFolder({\n      path: path\n    }).then(resFolder => {\n      console.log(resFolder);\n      this.dbx.filesListFolderLongpoll({\n        cursor: resFolder.cursor\n      }).then(response => {\n        console.log('lol');\n        this.setState({\n          changes: true\n        });\n      });\n      const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n        path: x.path_display\n      }));\n      return this.dbx.filesGetThumbnailBatch({\n        entries: entries\n      }).then(res => {\n        this.setState({\n          files: res.entries,\n          folders: resFolder.entries\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.changes || this.props.match.params.path !== prevProps.match.params.path) {\n      console.log('lol');\n      let path = \"\";\n\n      if (this.props.match.params.path) {\n        path = `/${this.props.match.params.path}`;\n      }\n\n      this.dbx.filesListFolder({\n        path: path\n      }).then(resFolder => {\n        this.dbx.filesListFolderLongpoll({\n          cursor: resFolder.cursor\n        }).then(response => this.setState({\n          changes: true\n        }));\n        const entries = resFolder.entries.filter(x => x[\".tag\"] === \"file\").map(x => ({\n          path: x.path_display\n        }));\n        return this.dbx.filesGetThumbnailBatch({\n          entries: entries\n        }).then(res => {\n          this.setState({\n            files: res.entries,\n            folders: resFolder.entries,\n            changes: false\n          });\n        });\n      });\n    }\n  }\n\n  //   starFile = (file) => {\n  //      let newStarArray;\n  //     const { starArray } = this.state;\n  //     console.log(starArray, file);\n  //     if(starArray.find(x => x.metadata.id === file.metadata.id)) {\n  //       newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id)\n  //     }else {\n  //       newStarArray = [...this.state.starArray, file];\n  //     }\n  //     let favorites = JSON.parse(localStorage.getItem('favorites'));\n  //     // const newStarArray = [...this.state.starArray, file];\n  //     localStorage.setItem('favorites', JSON.stringify(newStarArray));\n  //      this.setState({\n  //        starArray: newStarArray\n  //      })\n  //     console.log(this.state.starArray);\n  // }\n  render() {\n    // let favFiles = this.state.starArray.map(favfile => {\n    //   let fileName\n    //   let datum\n    //   let date_input\n    //   let size\n    //   let newSize\n    //   let i\n    //   console.log(favfile)\n    //   fileName = favfile.metadata.name;\n    //   size = favfile.metadata.size;\n    //     i = Math.floor(Math.log(size) / Math.log(1024));\n    //     newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i]\n    //   date_input = new Date((favfile.metadata.client_modified));\n    //   datum = new Date(date_input).toDateString();\n    //   console.log(favfile);\n    //   let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\n    //     return (\n    //       <tr>\n    //         <td>\n    //           <div >\n    //             <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\n    //             <a onClick={() => this.downloadFile(favfile.metadata.path_display)} href={this.state.URL} download={fileName} className=\"favfile\" key={favfile.id}> <br /> {favfile.metadata.name} {\" Latest change: \" + datum} { \" Filesize: \" + newSize} </a>\n    //             <input className=\"checkbox\" type=\"checkbox\"  id={favfile.id} onClick={this.starFile.bind(this, favfile)} />\n    //       </div>\n    //       </td>\n    //       </tr>\n    //     )\n    //   // }\n    //   })\n    const {\n      folders,\n      files\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(LeftNav, {\n      dbx: this.dbx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bigBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Header, {\n      search_FOLDERS_FILES: this.search_FOLDERS_FILES,\n      path: this.props.match.params.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Folders, {\n      dbx: this.dbx,\n      files: files,\n      renameFiles: this.renameFiles,\n      updateFileName: this.updateFileName,\n      copy: this.copy,\n      renameFolders: this.renameFolders,\n      updateFolderName: this.updateFolderName,\n      folders: folders,\n      onDelete: this.onDelete,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(RightNav, {\n      path: this.props.match.params.path,\n      files: files,\n      folders: folders,\n      dbx: this.dbx,\n      setFileState: this.setFileState,\n      setFolderState: this.setFolderState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/Main.js"],"names":["React","Component","Dropbox","LogOut","LeftNav","Folders","RightNav","Header","Main","constructor","props","setFolderState","newFolder","setState","folder","setFileState","newFile","file","copy","original_path","your_path","url","match","params","path","dbx","filesCopy","from_path","to_path","autorename","search_FOLDERS_FILES","e","filesSearch","query","target","value","then","res","entries","matches","map","x","metadata","folders","filter","path_display","filesGetThumbnailBatch","files","state","changes","starArray","renameRef","createRef","componentDidMount","JSON","parse","window","localStorage","getItem","log","accessToken","filesListFolder","resFolder","console","filesListFolderLongpoll","cursor","response","componentDidUpdate","prevProps","prevState","render","renameFiles","updateFileName","renameFolders","updateFolderName","onDelete"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Dropbox } from \"dropbox\";\r\nimport LogOut from './LogOut'\r\nimport LeftNav from \"./LeftNav\"\r\nimport Folders from \"./Folders\"\r\nimport RightNav from \"./RightNav\"\r\nimport Header from './Header'\r\n\r\nimport '../Css/icons.css'\r\nimport '../Css/mainFiles.css'\r\nimport '../Css/nav.css'\r\nimport '../Css/UlItems.css'\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n          folders: [],\r\n          files: [],\r\n\r\n          changes: false,\r\n\r\n          starArray: [],\r\n\r\n        }\r\n        this.renameRef = React.createRef();\r\n    }\r\n    setFolderState = (newFolder) =>{\r\n      this.setState({folder: newFolder})\r\n    }\r\n    setFileState = (newFile) =>{\r\n      this.setState({file: newFile})\r\n    }\r\n\r\n\r\n\r\n    copy = (original_path, your_path) =>{\r\n      let url;\r\n      if(this.props.match.params.path){\r\n         url = this.props.match.params.path\r\n      }\r\n      this.dbx.filesCopy({\r\n        from_path: original_path,\r\n        to_path: your_path,\r\n        autorename: true,\r\n      })\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\")\r\n      });\r\n        let log = JSON.parse(window.localStorage.getItem(\"favorites\"));\r\n\r\n      this.dbx = new Dropbox({ accessToken: localStorage.getItem(\"token\") });\r\n      let path = \"\"\r\n      if(this.props.match.params.path){\r\n        path = `/${this.props.match.params.path}`\r\n      }\r\n      this.dbx.filesListFolder({ path: path })\r\n      .then((resFolder) => {\r\n        console.log(resFolder)\r\n        this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\r\n        .then(response => {\r\n          console.log('lol')\r\n          this.setState({changes: true})\r\n\r\n        })\r\n\r\n        const entries = resFolder.entries\r\n          .filter(x => x[\".tag\"] === \"file\")\r\n          .map((x) => ({ path: x.path_display }));\r\n        return this.dbx.filesGetThumbnailBatch({\r\n          entries: entries,\r\n        })\r\n        .then((res) => {\r\n          this.setState({ files: res.entries, folders: resFolder.entries});\r\n        })\r\n      })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (this.state.changes || this.props.match.params.path !== prevProps.match.params.path) {\r\n        console.log('lol')\r\n\r\n        let path = \"\"\r\n        if(this.props.match.params.path){\r\n          path = `/${this.props.match.params.path}`\r\n        }\r\n        this.dbx.filesListFolder({ path: path })\r\n        .then((resFolder) => {\r\n\r\n          this.dbx.filesListFolderLongpoll({cursor: resFolder.cursor})\r\n          .then(response => this.setState({changes: true}))\r\n\r\n          const entries = resFolder.entries\r\n            .filter(x => x[\".tag\"] === \"file\")\r\n            .map((x) => ({ path: x.path_display }));\r\n          return this.dbx.filesGetThumbnailBatch({\r\n            entries: entries,\r\n          })\r\n          .then((res) => {\r\n            this.setState({ files: res.entries, folders: resFolder.entries, changes:false });\r\n          })\r\n        })\r\n  }\r\n\r\n  }\r\n\r\n  search_FOLDERS_FILES = (e) => {\r\n    this.dbx.filesSearch({ path: '' ,query: e.target.value})\r\n    .then(res => {\r\n      let entries = res.matches.map(x => x.metadata);\r\n\r\n      this.setState({ folders: entries });\r\n      entries = entries\r\n        .filter(x => x[\".tag\"] === \"file\")\r\n        .map((x) => ({ path: x.path_display }));\r\n      return this.dbx.filesGetThumbnailBatch({\r\n        entries: entries,\r\n      });\r\n      })\r\n      .then((res) => {\r\n        this.setState({ files: res.entries });\r\n      });\r\n\r\n  }\r\n\r\n\r\n//   starFile = (file) => {\r\n//      let newStarArray;\r\n//     const { starArray } = this.state;\r\n//     console.log(starArray, file);\r\n//     if(starArray.find(x => x.metadata.id === file.metadata.id)) {\r\n//       newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id)\r\n//     }else {\r\n//       newStarArray = [...this.state.starArray, file];\r\n//     }\r\n\r\n\r\n//     let favorites = JSON.parse(localStorage.getItem('favorites'));\r\n\r\n//     // const newStarArray = [...this.state.starArray, file];\r\n\r\n//     localStorage.setItem('favorites', JSON.stringify(newStarArray));\r\n\r\n\r\n//      this.setState({\r\n//        starArray: newStarArray\r\n//      })\r\n//     console.log(this.state.starArray);\r\n// }\r\n\r\n\r\n    render() {\r\n\r\n      // let favFiles = this.state.starArray.map(favfile => {\r\n      //   let fileName\r\n      //   let datum\r\n      //   let date_input\r\n      //   let size\r\n      //   let newSize\r\n      //   let i\r\n      //   console.log(favfile)\r\n      //   fileName = favfile.metadata.name;\r\n      //   size = favfile.metadata.size;\r\n      //     i = Math.floor(Math.log(size) / Math.log(1024));\r\n      //     newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i]\r\n\r\n      //   date_input = new Date((favfile.metadata.client_modified));\r\n      //   datum = new Date(date_input).toDateString();\r\n      //   console.log(favfile);\r\n      //   let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\r\n      //     return (\r\n      //       <tr>\r\n      //         <td>\r\n      //           <div >\r\n      //             <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n      //             <a onClick={() => this.downloadFile(favfile.metadata.path_display)} href={this.state.URL} download={fileName} className=\"favfile\" key={favfile.id}> <br /> {favfile.metadata.name} {\" Latest change: \" + datum} { \" Filesize: \" + newSize} </a>\r\n      //             <input className=\"checkbox\" type=\"checkbox\"  id={favfile.id} onClick={this.starFile.bind(this, favfile)} />\r\n      //       </div>\r\n      //       </td>\r\n      //       </tr>\r\n      //     )\r\n      //   // }\r\n      //   })\r\n\r\n      const { folders, files, } = this.state;\r\n\r\n        return (\r\n          <div className=\"App\" >\r\n\r\n          <LeftNav dbx={this.dbx}/>\r\n        <div className={\"bigBox\"}>\r\n          <Header search_FOLDERS_FILES={this.search_FOLDERS_FILES} path={this.props.match.params.path}/>\r\n          <main>\r\n            <Folders dbx={this.dbx} files={files} renameFiles={this.renameFiles} updateFileName={this.updateFileName} copy={this.copy}\r\n            renameFolders={this.renameFolders} updateFolderName={this.updateFolderName} folders={folders} onDelete={this.onDelete}  setFileState={this.setFileState} setFolderState={this.setFolderState}/>\r\n            <RightNav path={this.props.match.params.path} files={files} folders={folders} dbx={this.dbx} setFileState={this.setFileState} setFolderState={this.setFolderState} />\r\n          </main>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}