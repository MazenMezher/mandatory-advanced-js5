{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Folders.js\";\nimport React, { Component } from 'react';\nimport DropdownOptions from \"./DropdownOptions\";\nimport { Link } from 'react-router-dom';\nimport folderImg from '../Img/folder-img.png';\n\nclass Folders extends Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadFile = file => {\n      this.props.dbx.filesGetThumbnail({\n        \"path\": file\n      }).then(res => {\n        console.log(file);\n        let objURL = window.URL.createObjectURL(res.fileBlob);\n        this.setState({\n          URL: objURL\n        });\n      });\n    };\n\n    this.starFile = file => {\n      let newStarArray;\n      const {\n        starArray\n      } = this.state;\n\n      if (starArray.find(x => x.metadata.id === file.metadata.id)) {\n        newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id);\n      } else {\n        newStarArray = [...this.state.starArray, file];\n      }\n\n      let favorites = JSON.parse(localStorage.getItem('favorites'));\n      localStorage.setItem('favorites', JSON.stringify(newStarArray));\n      this.setState({\n        starArray: newStarArray\n      });\n    };\n\n    this.starFolder = folder => {\n      let newstarArrayFolders;\n      const {\n        starArrayFolders\n      } = this.state;\n\n      if (starArrayFolders.find(y => y.id === folder.id)) {\n        newstarArrayFolders = starArrayFolders.filter(y => y.id !== folder.id);\n      } else {\n        newstarArrayFolders = [...this.state.starArrayFolders, folder];\n      }\n\n      let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders'));\n      localStorage.setItem('favoritesFolders', JSON.stringify(newstarArrayFolders));\n      this.setState({\n        starArrayFolders: newstarArrayFolders\n      });\n    };\n\n    this.state = {\n      URL: null,\n      starArray: [],\n      starArrayFolders: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\"),\n      starArrayFolders: JSON.parse(window.localStorage.getItem(\"favoritesFolders\") || \"[]\")\n    });\n  }\n\n  render() {\n    const {\n      files,\n      folders,\n      onDelete\n    } = this.props;\n    const {\n      URL\n    } = this.state;\n    let minaFiler = files.map(file => {\n      let image = `data:image/jpeg;base64,${file.thumbnail}`;\n      let fileName;\n      let date_input;\n      let datum;\n      let size;\n      let newSize;\n      let i;\n      let id;\n      let path;\n      const starredFiles = this.state.starArray.find(x => file[\".tag\"] !== \"failure\" ? x.metadata.id === file.metadata.id : null);\n\n      if (file[\".tag\"] === \"failure\") {\n        return null;\n      } else {\n        if (file.metadata) {\n          fileName = file.metadata.name;\n          date_input = new Date(file.metadata.client_modified);\n          datum = new Date(date_input).toDateString();\n          size = file.metadata.size;\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n          id = file.metadata.id;\n          path = file.metadata.path_display;\n        } else {\n          fileName = file.name;\n          date_input = new Date(file.client_modified);\n          datum = new Date(date_input).toDateString();\n          size = file.size;\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n          id = file.id;\n          path = file.path_display;\n        }\n      }\n\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: image,\n        style: {\n          height: '42px',\n          width: '42px'\n        },\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        onClick: () => this.downloadFile(path),\n        href: URL,\n        download: fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, fileName), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \" Latest change: \" + datum), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \" Filesize: \" + newSize), React.createElement(\"td\", {\n        className: \"dropdownList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(DropdownOptions, {\n        onDelete: onDelete,\n        tag: file['.tag'],\n        path: path,\n        name: fileName,\n        id: id,\n        updateFileName: this.props.updateFileName,\n        renameFiles: this.props.renameFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"tdInputDivv\",\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        checked: !!starredFiles,\n        className: \"checkboxFiles\",\n        type: \"checkbox\",\n        id: file.id,\n        onClick: this.starFile.bind(this, file),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"hej\"))));\n    });\n    let minaFolders = folders.map(folder => {\n      // render img icons to folders !\n      const type = folder['.tag'];\n      let folderThumbnail;\n      const starredFolders = this.state.starArrayFolders.find(x => x.id === folder.id);\n\n      if (type === 'folder') {\n        folderThumbnail = folderImg;\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: folderThumbnail,\n          style: {\n            height: '42px',\n            width: '42px'\n          },\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }), React.createElement(Link, {\n          to: `/main${folder.path_display}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, folder.name), React.createElement(\"td\", {\n          className: \"dropdownList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(DropdownOptions, {\n          onDelete: onDelete,\n          tag: folder['.tag'],\n          path: folder.path_display,\n          name: folder.name,\n          id: folder.id,\n          updateFolderName: this.props.updateFolderName,\n          renameFolders: this.props.renameFolders,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: \"tdInputDiv\",\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          checked: !!starredFolders,\n          className: \"checkbox\",\n          type: \"checkbox\",\n          id: folder.id,\n          onClick: this.starFolder.bind(this, folder),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }))));\n      }\n    });\n    let favFiles = this.state.starArray.map(favfile => {\n      let fileName;\n      let datum;\n      let date_input;\n      let size;\n      let newSize;\n      let i;\n      fileName = favfile.metadata.name;\n      size = favfile.metadata.size;\n      i = Math.floor(Math.log(size) / Math.log(1024));\n      newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n      date_input = new Date(favfile.metadata.client_modified);\n      datum = new Date(date_input).toDateString();\n      let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: image,\n        style: {\n          height: '42px',\n          width: '42px'\n        },\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        onClick: () => this.downloadFile(favfile.path_display),\n        href: this.state.URL,\n        download: fileName,\n        className: \"favfile\",\n        key: favfile.metadata.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), \" \", favfile.metadata.name, \" \", \" Latest change: \" + datum, \" \", \" Filesize: \" + newSize, \" \"))));\n    });\n    let favFolders = this.state.starArrayFolders.map(favfolder => {\n      let folderName;\n      const type = favfolder['.tag'];\n      let folderThumbnail;\n\n      if (type === 'folder') {\n        folderThumbnail = folderImg;\n        folderName = favfolder.name;\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: folderThumbnail,\n          style: {\n            height: '42px',\n            width: '42px'\n          },\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }), React.createElement(\"a\", {\n          onClick: () => this.downloadFile(favfolder.path_display),\n          href: this.state.URL,\n          download: folderName,\n          className: \"favfile\",\n          key: favfolder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }), \" \", favfolder.name, \" \"))));\n      }\n    });\n    return React.createElement(\"div\", {\n      className: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Folder/file name\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Folders!\"), minaFolders, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Files!\"), minaFiler, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Favorite Folders!\"), favFolders, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Favorite Files!\"), favFiles)));\n  }\n\n}\n\nexport default Folders;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/Folders.js"],"names":["React","Component","DropdownOptions","Link","folderImg","Folders","constructor","props","downloadFile","file","dbx","filesGetThumbnail","then","res","console","log","objURL","window","URL","createObjectURL","fileBlob","setState","starFile","newStarArray","starArray","state","find","x","metadata","id","filter","favorites","JSON","parse","localStorage","getItem","setItem","stringify","starFolder","folder","newstarArrayFolders","starArrayFolders","y","favoritesFolders","componentDidMount","render","files","folders","onDelete","minaFiler","map","image","thumbnail","fileName","date_input","datum","size","newSize","i","path","starredFiles","name","Date","client_modified","toDateString","Math","floor","pow","toFixed","path_display","display","height","width","updateFileName","renameFiles","bind","minaFolders","type","folderThumbnail","starredFolders","updateFolderName","renameFolders","favFiles","favfile","favFolders","favfolder","folderName","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport DropdownOptions from \"./DropdownOptions\"\r\nimport {Link} from 'react-router-dom'\r\nimport folderImg from '../Img/folder-img.png';\r\n\r\nclass Folders extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      URL: null,\r\n      starArray: [],\r\n      starArrayFolders: [],\r\n    }\r\n  }\r\n  downloadFile = (file) => {\r\n    this.props.dbx.filesGetThumbnail({\"path\": file})\r\n    .then(res => {\r\n      console.log(file)\r\n      let objURL = window.URL.createObjectURL(res.fileBlob);\r\n      this.setState({ URL: objURL });\r\n    });\r\n  }\r\n\r\n  starFile = (file) => {\r\n    let newStarArray;\r\n    const { starArray } = this.state;\r\n    \r\n    if(starArray.find(x => x.metadata.id === file.metadata.id)) {\r\n      newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id)\r\n    }else {\r\n      newStarArray = [...this.state.starArray, file];\r\n    }\r\n\r\n    let favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    localStorage.setItem('favorites', JSON.stringify(newStarArray));\r\n     this.setState({\r\n       starArray: newStarArray\r\n     })\r\n}\r\n\r\nstarFolder = (folder) => {\r\n  let newstarArrayFolders;\r\n  const { starArrayFolders } = this.state;\r\n \r\n  if(starArrayFolders.find(y => y.id === folder.id)) {\r\n   newstarArrayFolders = starArrayFolders.filter(y => y.id !== folder.id)\r\n  }else {\r\n   newstarArrayFolders = [...this.state.starArrayFolders, folder];\r\n  }\r\n \r\n  let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders'));\r\n  localStorage.setItem('favoritesFolders', JSON.stringify(newstarArrayFolders));\r\n   this.setState({\r\n     starArrayFolders: newstarArrayFolders\r\n   })\r\n }\r\n\r\n componentDidMount() {\r\n  this.setState({\r\n    starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\"),\r\n    starArrayFolders: JSON.parse(window.localStorage.getItem(\"favoritesFolders\") || \"[]\"),\r\n  });  \r\n}\r\n\r\n    render() {\r\n        const{files,folders,onDelete} = this.props\r\n        const{URL} = this.state\r\n\r\n\r\n        let minaFiler = files.map(file => {\r\n            let image = `data:image/jpeg;base64,${file.thumbnail}`;\r\n            let fileName\r\n            let date_input\r\n            let datum\r\n            let size\r\n            let newSize\r\n            let i\r\n            let id\r\n            let path\r\n\r\n            const starredFiles = this.state.starArray\r\n            .find(x => file[\".tag\"] !== \"failure\" ?  x.metadata.id === file.metadata.id : null)\r\n\r\n            if(file[\".tag\"] === \"failure\"){\r\n              return null\r\n            }\r\n            else {\r\n              if (file.metadata) {\r\n                \r\n                fileName = file.metadata.name;\r\n                date_input = new Date((file.metadata.client_modified));\r\n                datum = new Date(date_input).toDateString();\r\n\r\n                size = file.metadata.size;\r\n                i = Math.floor(Math.log(size) / Math.log(1024));\r\n                newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\r\n\r\n                id = file.metadata.id;\r\n                path = file.metadata.path_display;\r\n              }\r\n              else {\r\n                fileName = file.name;\r\n                date_input = new Date((file.client_modified));\r\n                datum = new Date(date_input).toDateString();\r\n  \r\n                size = file.size;\r\n                i = Math.floor(Math.log(size) / Math.log(1024));\r\n                newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\r\n\r\n                id = file.id;\r\n                path = file.path_display;\r\n              }\r\n            }\r\n\r\n            return (\r\n              <tr>\r\n                <td>\r\n                <div style={{ display: 'flex' }}>\r\n                  <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n                  <a onClick={() => this.downloadFile(path)} href={URL} download={fileName}>{fileName}</a>\r\n\r\n                  <span>{\" Latest change: \" + datum}</span>\r\n                  <span>{\" Filesize: \" + newSize}</span>\r\n\r\n                  {/* <input className=\"checkboxFiles\" type=\"checkbox\"  id={file.id} onClick={this.starFile.bind(this, file)} /> */}\r\n\r\n                  <td className=\"dropdownList\">\r\n                    <DropdownOptions\r\n                      onDelete={onDelete}\r\n                      tag={file['.tag']}\r\n                      path={path}\r\n                      name={fileName}\r\n                      id={id}\r\n                      updateFileName={this.props.updateFileName}\r\n                      renameFiles={this.props.renameFiles}\r\n                    />\r\n                  </td>\r\n\r\n                </div>\r\n                <div className=\"tdInputDivv\" style={{display: 'flex'}}>\r\n                <input  checked={!!starredFiles} className=\"checkboxFiles\" type=\"checkbox\"  id={file.id} onClick={this.starFile.bind(this, file)} />\r\n                <p>hej</p>\r\n                </div>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })\r\n\r\n\r\n\r\n        let minaFolders = folders.map(folder => {\r\n            // render img icons to folders !\r\n            const type = folder['.tag'];\r\n            let folderThumbnail\r\n\r\n            const starredFolders = this.state.starArrayFolders\r\n              .find(x => x.id === folder.id);\r\n\r\n            if (type === 'folder') {\r\n              folderThumbnail = folderImg;\r\n            return (\r\n              <tr>\r\n                <td>\r\n                <div style={{ display: 'flex' }}>\r\n                <img src={folderThumbnail} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n\r\n                <Link to={`/main${folder.path_display}`}>\r\n                  {folder.name}\r\n                </Link>\r\n                {/* <input className=\"checkboxFiles\" type=\"checkbox\"  id={folder.id} onClick={this.starFile.bind(this, folder)} /> */}\r\n\r\n                    {/* <input className=\"input\" type=\"text\" onChange={this.updateFolderName.bind(this)}/>\r\n                    <button onClick={() => this.renameFolders(folder.path_display)}>Rename</button> */}\r\n\r\n                    <td className=\"dropdownList\">\r\n                      <DropdownOptions\r\n                        onDelete={onDelete}\r\n                        tag={folder['.tag']}\r\n                        path={folder.path_display}\r\n                        name={folder.name}\r\n                        id={folder.id}\r\n                        updateFolderName={this.props.updateFolderName}\r\n                        renameFolders={this.props.renameFolders}\r\n                      />\r\n                    </td>\r\n                </div>\r\n                <div className=\"tdInputDiv\" style={{display: 'flex'}}>\r\n                    <input checked={!!starredFolders} className=\"checkbox\" type=\"checkbox\"  id={folder.id} onClick={this.starFolder.bind(this, folder)} />\r\n                    </div>\r\n                </td>\r\n              </tr>\r\n            )\r\n          }\r\n          })\r\n          let favFiles = this.state.starArray.map(favfile => {\r\n            let fileName\r\n            let datum\r\n            let date_input\r\n            let size\r\n            let newSize\r\n            let i\r\n            fileName = favfile.metadata.name;\r\n            size = favfile.metadata.size;\r\n            i = Math.floor(Math.log(size) / Math.log(1024));\r\n            newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\r\n            date_input = new Date((favfile.metadata.client_modified));\r\n            datum = new Date(date_input).toDateString();\r\n            let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\r\n              return (\r\n                <tr>\r\n                  <td>\r\n                    <div style={{ display: 'flex' }}>\r\n                      <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n                      <a onClick={() => this.downloadFile(favfile.path_display)} href={this.state.URL} download={fileName} className=\"favfile\" key={favfile.metadata.id}> <br /> {favfile.metadata.name} {\" Latest change: \" + datum} { \" Filesize: \" + newSize} </a>\r\n                </div>\r\n                </td>\r\n                </tr>\r\n              )\r\n            });\r\n          let favFolders = this.state.starArrayFolders.map(favfolder => {\r\n            let folderName;\r\n            const type = favfolder['.tag'];\r\n            let folderThumbnail\r\n    \r\n            if (type === 'folder') {\r\n              folderThumbnail = folderImg;\r\n            folderName = favfolder.name;\r\n              return (\r\n                <tr>\r\n                  <td>\r\n                    <div style={{ display: 'flex' }}>\r\n                      <img src={folderThumbnail} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n                      <a onClick={() => this.downloadFile(favfolder.path_display)} href={this.state.URL} download={folderName} className=\"favfile\" key={favfolder.id}> <br /> {favfolder.name} </a>\r\n                </div>\r\n                </td>\r\n                </tr>\r\n                )\r\n              }\r\n            })\r\n            return(\r\n              <div className=\"files\">\r\n              <table className=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Folder/file name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <h2>Folders!</h2>\r\n                  {minaFolders}\r\n  \r\n                <h2 style={{ marginTop: '10%' }}>Files!</h2>\r\n                  {minaFiler}\r\n  \r\n                <h2 style={{ marginTop: '10%' }} >Favorite Folders!</h2>\r\n                  {favFolders}\r\n                \r\n                <h2 style={{ marginTop: '10%' }} >Favorite Files!</h2>\r\n                  {favFiles}\r\n              </tbody>\r\n              </table>\r\n          </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Folders\r\n"]},"metadata":{},"sourceType":"module"}