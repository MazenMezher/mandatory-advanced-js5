{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Motar\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Folders.js\";\nimport React, { Component } from 'react';\nimport DropdownOptions from \"./DropdownOptions\";\nimport { Link } from 'react-router-dom';\nimport folderImg from '../Img/folder-img.png';\n\nclass Folders extends Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadFile = file => {\n      this.props.dbx.filesGetThumbnail({\n        \"path\": file\n      }).then(res => {\n        console.log(file);\n        let objURL = window.URL.createObjectURL(res.fileBlob);\n        this.setState({\n          URL: objURL\n        });\n      });\n    };\n\n    this.state = {\n      URL: null\n    };\n  }\n\n  render() {\n    const {\n      files,\n      folders,\n      onDelete\n    } = this.props;\n    const {\n      URL\n    } = this.state;\n    let minaFiler = files.map(file => {\n      let image = `data:image/jpeg;base64,${file.thumbnail}`;\n      let fileName;\n      let date_input;\n      let datum;\n      let size;\n      let newSize;\n      let i;\n      let idx;\n      let path;\n\n      if (file[\".tag\"] === \"failure\") {\n        return null;\n      } else {\n        if (file.metadata) {\n          fileName = file.metadata.name;\n          date_input = new Date(file.metadata.client_modified);\n          datum = new Date(date_input).toDateString();\n          size = file.metadata.size;\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n        } else {\n          fileName = file.name;\n          date_input = new Date(file.client_modified);\n          datum = new Date(date_input).toDateString();\n          size = file.size;\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n        }\n      }\n\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: image,\n        style: {\n          height: '42px',\n          width: '42px'\n        },\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        onClick: () => this.downloadFile(file.metadata.path_display),\n        href: URL,\n        download: fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, fileName), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" Latest change: \" + datum), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" Filesize: \" + newSize), React.createElement(\"input\", {\n        className: \"tdInput\",\n        type: \"text\",\n        onChange: this.props.updateFileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"tdButton\",\n        onClick: () => this.props.renameFiles(file.metadata.path_display, file.metadata.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Rename\"), React.createElement(\"td\", {\n        className: \"dropdownList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(DropdownOptions, {\n        onDelete: onDelete,\n        tag: file['.tag'],\n        path: file.metadata.path_display,\n        name: file.metadata.name,\n        id: file.metadata.id,\n        updateFileName: this.props.updateFileName,\n        renameFiles: this.props.renameFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })))));\n    });\n    let minaFolders = folders.map(folder => {\n      // render img icons to folders !\n      const type = folder['.tag'];\n      let folderThumbnail;\n\n      if (type === 'folder') {\n        folderThumbnail = folderImg;\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: folderThumbnail,\n          style: {\n            height: '42px',\n            width: '42px'\n          },\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }), React.createElement(Link, {\n          to: `/main${folder.path_display}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, folder.name), React.createElement(\"td\", {\n          className: \"dropdownList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(DropdownOptions, {\n          onDelete: onDelete,\n          tag: folder['.tag'],\n          path: folder.path_display,\n          name: folder.name,\n          id: folder.id,\n          updateFolderName: this.props.updateFolderName,\n          renameFolders: this.props.renameFolders,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        })))));\n      }\n    });\n    return React.createElement(\"div\", {\n      className: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Folder/file name\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Folders!\"), minaFolders, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Files!\"), minaFiler, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Favorites\"))));\n  }\n\n}\n\nexport default Folders;","map":{"version":3,"sources":["C:/Users/Motar/Desktop/mandatory-advanced-js5/src/Components/Folders.js"],"names":["React","Component","DropdownOptions","Link","folderImg","Folders","constructor","props","downloadFile","file","dbx","filesGetThumbnail","then","res","console","log","objURL","window","URL","createObjectURL","fileBlob","setState","state","render","files","folders","onDelete","minaFiler","map","image","thumbnail","fileName","date_input","datum","size","newSize","i","idx","path","metadata","name","Date","client_modified","toDateString","Math","floor","pow","toFixed","display","height","width","path_display","updateFileName","renameFiles","id","minaFolders","folder","type","folderThumbnail","updateFolderName","renameFolders","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport DropdownOptions from \"./DropdownOptions\"\r\nimport {Link} from 'react-router-dom'\r\nimport folderImg from '../Img/folder-img.png';\r\n\r\nclass Folders extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      URL: null,\r\n    }\r\n  }\r\n  downloadFile = (file) => {\r\n     this.props.dbx.filesGetThumbnail({\"path\": file})\r\n      .then(res => {\r\n        console.log(file)\r\n        let objURL = window.URL.createObjectURL(res.fileBlob);\r\n        this.setState({ URL: objURL });\r\n      });\r\n  }\r\n\r\n    render() {\r\n        const{files,folders,onDelete} = this.props\r\n        const{URL} = this.state\r\n\r\n\r\n        let minaFiler = files.map(file => {\r\n            let image = `data:image/jpeg;base64,${file.thumbnail}`;\r\n            let fileName\r\n            let date_input\r\n            let datum\r\n            let size\r\n            let newSize\r\n            let i\r\n            let idx\r\n            let path\r\n\r\n            if(file[\".tag\"] === \"failure\"){\r\n              return null\r\n            }\r\n            else {\r\n              if (file.metadata) {\r\n                fileName = file.metadata.name;\r\n              date_input = new Date((file.metadata.client_modified));\r\n              datum = new Date(date_input).toDateString();\r\n\r\n              size = file.metadata.size;\r\n              i = Math.floor(Math.log(size) / Math.log(1024));\r\n              newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\r\n              }\r\n              else {\r\n                fileName = file.name;\r\n                date_input = new Date((file.client_modified));\r\n                datum = new Date(date_input).toDateString();\r\n  \r\n                size = file.size;\r\n                i = Math.floor(Math.log(size) / Math.log(1024));\r\n                newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\r\n              }\r\n            }\r\n\r\n            return (\r\n              <tr>\r\n                <td>\r\n                <div style={{ display: 'flex' }}>\r\n                  <img src={image} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n                  <a onClick={() => this.downloadFile(file.metadata.path_display)} href={URL} download={fileName}>{fileName}</a>\r\n\r\n                  <span>{\" Latest change: \" + datum}</span>\r\n                  <span>{\" Filesize: \" + newSize}</span>\r\n\r\n                  {/* <input className=\"checkboxFiles\" type=\"checkbox\"  id={file.id} onClick={this.starFile.bind(this, file)} /> */}\r\n\r\n                  <input className=\"tdInput\" type=\"text\" onChange={this.props.updateFileName}/>\r\n                  <button className=\"tdButton\" onClick={() => this.props.renameFiles(file.metadata.path_display, file.metadata.id)}>Rename</button>\r\n\r\n                  <td className=\"dropdownList\">\r\n                    <DropdownOptions\r\n                      onDelete={onDelete}\r\n                      tag={file['.tag']}\r\n                      path={file.metadata.path_display}\r\n                      name={file.metadata.name}\r\n                      id={file.metadata.id}\r\n                      updateFileName={this.props.updateFileName}\r\n                      renameFiles={this.props.renameFiles}\r\n                    />\r\n                  </td>\r\n\r\n                </div>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })\r\n\r\n\r\n\r\n        let minaFolders = folders.map(folder => {\r\n            // render img icons to folders !\r\n            const type = folder['.tag'];\r\n            let folderThumbnail\r\n\r\n            if (type === 'folder') {\r\n              folderThumbnail = folderImg;\r\n            return (\r\n              <tr>\r\n                <td>\r\n                <div style={{ display: 'flex' }}>\r\n                <img src={folderThumbnail} style={{ height: '42px', width: '42px' }} alt=\"\"/>\r\n\r\n                <Link to={`/main${folder.path_display}`}>\r\n                  {folder.name}\r\n                </Link>\r\n                {/* <input className=\"checkboxFiles\" type=\"checkbox\"  id={folder.id} onClick={this.starFile.bind(this, folder)} /> */}\r\n\r\n                    {/* <input className=\"input\" type=\"text\" onChange={this.updateFolderName.bind(this)}/>\r\n                    <button onClick={() => this.renameFolders(folder.path_display)}>Rename</button> */}\r\n\r\n                    <td className=\"dropdownList\">\r\n                      <DropdownOptions\r\n                        onDelete={onDelete}\r\n                        tag={folder['.tag']}\r\n                        path={folder.path_display}\r\n                        name={folder.name}\r\n                        id={folder.id}\r\n                        updateFolderName={this.props.updateFolderName}\r\n                        renameFolders={this.props.renameFolders}\r\n                      />\r\n                    </td>\r\n                </div>\r\n                </td>\r\n              </tr>\r\n            )\r\n          }\r\n          })\r\n\r\n          return(\r\n            <div className=\"files\">\r\n            <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Folder/file name</th>\r\n                  </tr>\r\n              </thead>\r\n              <tbody>\r\n\r\n              <h2>Folders!</h2>\r\n                {minaFolders}\r\n\r\n              <h2 style={{ marginTop: '10%' }}>Files!</h2>\r\n                {minaFiler}\r\n\r\n              <h2 style={{ marginTop: '10%' }} >Favorites</h2>\r\n                {/* {favFiles}\r\n                 */}\r\n\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Folders\r\n"]},"metadata":{},"sourceType":"module"}