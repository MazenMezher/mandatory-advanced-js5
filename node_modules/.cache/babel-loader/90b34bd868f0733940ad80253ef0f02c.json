{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TG\\\\Desktop\\\\mandatory-advanced-js5\\\\src\\\\Components\\\\Folders.js\";\nimport React, { Component } from 'react';\nimport DropdownOptions from \"./DropdownOptions\";\nimport { Link } from 'react-router-dom';\nimport folderImg from '../Img/folder-img.png';\nimport fileImg from '../Img/file-img.png';\n\nclass Folders extends Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadFile = file => {\n      this.props.dbx.filesDownload({\n        path: file\n      }).then(res => {\n        console.log(res);\n        let objURL = window.URL.createObjectURL(res.fileBlob);\n        this.setState({\n          URL: objURL\n        });\n      });\n    };\n\n    this.updateFolderName = e => {\n      this.setState({\n        folderRename: e.target.value\n      });\n    };\n\n    this.updateFileName = e => {\n      this.setState({\n        fileRename: e.target.value\n      });\n    };\n\n    this.onDelete = (path_delete, tag) => {\n      if (tag === 'folder') {\n        const {\n          folders\n        } = this.props;\n        this.props.dbx.filesDelete({\n          path: path_delete\n        }).then(response => {\n          let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders'));\n          let newFavouriteFolders = favoritesFolders.filter(favouriteFolder => favouriteFolder.id !== response.id);\n          localStorage.setItem('favoritesFolders', JSON.stringify(newFavouriteFolders));\n          let newFolder = folders.filter(folder => folder.name !== response.name);\n          this.props.setFolderState(newFolder);\n          this.setState({\n            starArrayFolders: newFavouriteFolders\n          });\n        });\n      } else {\n        const {\n          files\n        } = this.props;\n        let newfavoritesFiles;\n        this.props.dbx.filesDelete({\n          path: path_delete\n        }).then(response => {\n          let newFiles = files.filter(files => {\n            if (files['.tag'] === 'failure') {\n              return null;\n            } else {\n              let favoritesFiles = JSON.parse(localStorage.getItem('favorites'));\n              newfavoritesFiles = favoritesFiles.filter(favoritesFile => favoritesFile.metadata.id !== response.id);\n              localStorage.setItem('favorites', JSON.stringify(newfavoritesFiles));\n              return files.metadata.name !== response.name;\n            }\n          });\n          this.props.setFileState(newFiles);\n          this.setState({\n            starArray: newfavoritesFiles\n          });\n        });\n      }\n    };\n\n    this.renameFolders = (path, id) => {\n      const newName = this.state.folderRename;\n      let newfavoritesFolders = [];\n      let newPath = path.split('/');\n      newPath[newPath.length - 1] = newName;\n      newPath = newPath.filter(path => path !== \"\");\n      newPath = newPath.reduce((acc, currentpath) => acc + `${currentpath}`, 0);\n      console.log(newPath);\n      this.props.dbx.filesMoveV2({\n        from_path: path,\n        to_path: `/${newName}`\n      }).then(res => {\n        let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders') || \"[]\");\n        newfavoritesFolders = favoritesFolders.map(favoritesFolder => favoritesFolder.id === res.metadata.id ? { ...favoritesFolder,\n          ...res.metadata\n        } : favoritesFolder);\n        window.localStorage.setItem('favoritesFolders', JSON.stringify(newfavoritesFolders));\n        const newFolders = [...this.props.folders];\n        const idx = newFolders.findIndex(x => x.id === id);\n        newFolders[idx] = res.metadata;\n        this.props.setFolderState(newFolders);\n        this.setState({\n          starArrayFolders: newfavoritesFolders\n        });\n      });\n    };\n\n    this.renameFiles = (path, id) => {\n      const newName = this.state.fileRename;\n      let newfavoritesFiles = [];\n      let splitPath = path.split(\".\");\n      let fileType = splitPath[1];\n      this.props.dbx.filesMoveV2({\n        from_path: path,\n        to_path: `/${newName}.${fileType}`\n      }).then(res => {\n        const newFiles = [...this.props.files];\n        const idx = newFiles.findIndex(x => {\n          if (x['.tag'] === 'failure') {\n            return null;\n          } else {\n            let favoritesFiles = JSON.parse(localStorage.getItem('favorites'));\n\n            if (favoritesFiles !== null) {\n              newfavoritesFiles = favoritesFiles.map(favoritesFile => favoritesFile.metadata.id === res.metadata.id ? { ...favoritesFile,\n                ...res\n              } : favoritesFile);\n              window.localStorage.setItem('favorites', JSON.stringify(newfavoritesFiles));\n            }\n\n            return x.metadata.id === id;\n          }\n        });\n        newFiles[idx] = res.metadata;\n        this.props.setFileState(newFiles);\n        this.setState({\n          starArray: newfavoritesFiles\n        });\n      });\n    };\n\n    this.starFile = file => {\n      let newStarArray;\n      const {\n        starArray\n      } = this.state;\n      console.log(\"file\", file);\n\n      if (starArray.find(x => x.metadata.id === file.metadata.id)) {\n        newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id);\n      } else {\n        newStarArray = [...this.state.starArray, file];\n      }\n\n      let favorites = JSON.parse(localStorage.getItem('favorites'));\n      localStorage.setItem('favorites', JSON.stringify(newStarArray));\n      this.setState({\n        starArray: newStarArray\n      });\n    };\n\n    this.starFolder = folder => {\n      let newstarArrayFolders;\n      const {\n        starArrayFolders\n      } = this.state;\n\n      if (starArrayFolders.find(y => y.id === folder.id)) {\n        newstarArrayFolders = starArrayFolders.filter(y => y.id !== folder.id);\n      } else {\n        newstarArrayFolders = [...this.state.starArrayFolders, folder];\n      }\n\n      let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders'));\n      localStorage.setItem('favoritesFolders', JSON.stringify(newstarArrayFolders));\n      this.setState({\n        starArrayFolders: newstarArrayFolders\n      });\n    };\n\n    this.state = {\n      URL: null,\n      starArray: [],\n      starArrayFolders: [],\n      folderRename: '',\n      fileRename: ''\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\"),\n      starArrayFolders: JSON.parse(window.localStorage.getItem(\"favoritesFolders\") || \"[]\")\n    });\n  }\n\n  render() {\n    const {\n      files,\n      folders\n    } = this.props;\n    const {\n      URL\n    } = this.state;\n    let minaFiler = files.map(file => {\n      let image = `data:image/jpeg;base64,${file.thumbnail}`;\n      let fileName;\n      let date_input;\n      let datum;\n      let size;\n      let newSize;\n      let i;\n      let id;\n      let path;\n      let starredFiles = [];\n\n      if (file[\".tag\"] === \"failure\") {\n        return null;\n      } else {\n        if (file.metadata) {\n          starredFiles = this.state.starArray.find(x => file[\".tag\"] !== \"failure\" ? x.metadata.id === file.metadata.id : null);\n          fileName = file.metadata.name;\n          date_input = new Date(file.metadata.client_modified);\n          datum = new Date(date_input).toDateString();\n          size = file.metadata.size;\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n          id = file.metadata.id;\n          path = file.metadata.path_display;\n        } else {\n          starredFiles = this.state.starArray.find(x => file[\".tag\"] !== \"failure\" ? x.id === file.metadata.id : null);\n          fileName = file.name;\n          date_input = new Date(file.client_modified);\n          datum = new Date(date_input).toDateString();\n          size = file.size;\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n          id = file.id;\n          path = file.path_display;\n        }\n      }\n\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: file.thumbnail !== null ? image : fileImg,\n        style: {\n          height: '42px',\n          width: '42px'\n        },\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        onClick: () => this.downloadFile(path),\n        href: URL,\n        download: fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, fileName), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \" Latest change: \" + datum), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \" Filesize: \" + newSize), React.createElement(\"td\", {\n        className: \"dropdownList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(DropdownOptions, {\n        onDelete: this.onDelete,\n        tag: file['.tag'],\n        path: path,\n        name: fileName,\n        id: id,\n        path_display: file.metadata.path_display,\n        updateFileName: this.updateFileName,\n        renameFiles: this.renameFiles,\n        copy: this.props.copy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"tdInputDivv\",\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        checked: !!starredFiles,\n        className: \"checkboxFiles\",\n        type: \"checkbox\",\n        id: file.id,\n        onClick: this.starFile.bind(this, file),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }))));\n    });\n    let minaFolders = folders.map(folder => {\n      // render img icons to folders !\n      const type = folder['.tag'];\n      let folderThumbnail;\n      const starredFolders = this.state.starArrayFolders.find(x => x.id === folder.id);\n\n      if (type === 'folder') {\n        folderThumbnail = folderImg;\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: folderThumbnail,\n          style: {\n            height: '42px',\n            width: '42px'\n          },\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }), React.createElement(Link, {\n          to: `/main${folder.path_display}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272\n          },\n          __self: this\n        }, folder.name), React.createElement(\"td\", {\n          className: \"dropdownList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, React.createElement(DropdownOptions, {\n          onDelete: this.onDelete,\n          tag: folder['.tag'],\n          path: folder.path_display,\n          name: folder.name,\n          id: folder.id,\n          path_display: folder.path_display,\n          updateFolderName: this.updateFolderName,\n          renameFolders: this.renameFolders,\n          copy: this.props.copy,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: \"tdInputDiv\",\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          checked: !!starredFolders,\n          className: \"checkbox\",\n          type: \"checkbox\",\n          id: folder.id,\n          onClick: this.starFolder.bind(this, folder),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        }))));\n      }\n    });\n    let favFiles = this.state.starArray.map(favfile => {\n      let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\n      let fileName;\n      let datum;\n      let date_input;\n      let size;\n      let newSize;\n      let i;\n      fileName = favfile.metadata.name;\n      size = favfile.metadata.size;\n      i = Math.floor(Math.log(size) / Math.log(1024));\n      newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\" + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n      date_input = new Date(favfile.metadata.client_modified);\n      datum = new Date(date_input).toDateString();\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: favfile.thumbnail !== null ? image : fileImg,\n        style: {\n          height: '42px',\n          width: '42px'\n        },\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        onClick: () => this.downloadFile(favfile.metadata.path_display),\n        href: this.state.URL,\n        download: favfile.metadata.name,\n        className: \"favfile\",\n        key: favfile.metadata.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \" \", favfile.metadata.name, \" \"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \" Latest change: \" + datum), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \" Filesize: \" + newSize))));\n    });\n    let favFolders = this.state.starArrayFolders.map(favfolder => {\n      let folderName;\n      const type = favfolder['.tag'];\n      let folderThumbnail;\n\n      if (type === 'folder') {\n        folderThumbnail = folderImg;\n        folderName = favfolder.name;\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: folderThumbnail,\n          style: {\n            height: '42px',\n            width: '42px'\n          },\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 341\n          },\n          __self: this\n        }), React.createElement(Link, {\n          to: `/main${favfolder.path_display}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        }, favfolder.name))));\n      }\n    });\n    return React.createElement(\"div\", {\n      className: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Folder/file name\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Folders!\"), minaFolders, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"Files!\"), minaFiler, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Favorite Folders!\"), favFolders, React.createElement(\"h2\", {\n      style: {\n        marginTop: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Favorite Files!\"), favFiles)));\n  }\n\n}\n\nexport default Folders;","map":{"version":3,"sources":["C:/Users/TG/Desktop/mandatory-advanced-js5/src/Components/Folders.js"],"names":["React","Component","DropdownOptions","Link","folderImg","fileImg","Folders","constructor","props","downloadFile","file","dbx","filesDownload","path","then","res","console","log","objURL","window","URL","createObjectURL","fileBlob","setState","updateFolderName","e","folderRename","target","value","updateFileName","fileRename","onDelete","path_delete","tag","folders","filesDelete","response","favoritesFolders","JSON","parse","localStorage","getItem","newFavouriteFolders","filter","favouriteFolder","id","setItem","stringify","newFolder","folder","name","setFolderState","starArrayFolders","files","newfavoritesFiles","newFiles","favoritesFiles","favoritesFile","metadata","setFileState","starArray","renameFolders","newName","state","newfavoritesFolders","newPath","split","length","reduce","acc","currentpath","filesMoveV2","from_path","to_path","map","favoritesFolder","newFolders","idx","findIndex","x","renameFiles","splitPath","fileType","starFile","newStarArray","find","favorites","starFolder","newstarArrayFolders","y","componentDidMount","render","minaFiler","image","thumbnail","fileName","date_input","datum","size","newSize","i","starredFiles","Date","client_modified","toDateString","Math","floor","pow","toFixed","path_display","display","height","width","copy","bind","minaFolders","type","folderThumbnail","starredFolders","favFiles","favfile","favFolders","favfolder","folderName","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DropdownOptions from \"./DropdownOptions\"\nimport {Link} from 'react-router-dom'\nimport folderImg from '../Img/folder-img.png';\nimport fileImg from '../Img/file-img.png'\n\nclass Folders extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      URL: null,\n      starArray: [],\n      starArrayFolders: [],\n      folderRename: '',\n      fileRename: '',\n    }\n  }\n  downloadFile = (file) => {\n    this.props.dbx.filesDownload({path: file})\n    .then(res => {\n      console.log(res)\n      let objURL = window.URL.createObjectURL(res.fileBlob);\n      this.setState({ URL: objURL });\n    });\n  }\n  updateFolderName = e => {\n    this.setState({ folderRename: e.target.value });\n  }\n\n  updateFileName = e => {\n    this.setState({ fileRename: e.target.value });\n  }\n\n  // delets files and closes delete window\n  onDelete = (path_delete, tag) =>{\n    if(tag === 'folder'){\n    const{folders} = this.props\n    this.props.dbx.filesDelete({path: path_delete})\n    .then(response =>{\n      let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders'));\n      let newFavouriteFolders = favoritesFolders.filter( favouriteFolder => favouriteFolder.id !== response.id)\n      localStorage.setItem('favoritesFolders', JSON.stringify(newFavouriteFolders))\n      let newFolder = folders.filter( folder => folder.name !== response.name)\n      this.props.setFolderState(newFolder)\n      this.setState({starArrayFolders: newFavouriteFolders})\n    })\n  }else{\n    const{files} = this.props\n    let newfavoritesFiles\n    this.props.dbx.filesDelete({path: path_delete})\n    .then(response =>{\n      let newFiles = files.filter( files => {\n        if (files['.tag'] === 'failure') {\n          return null;\n        }\n        else {\n          let favoritesFiles = JSON.parse(localStorage.getItem('favorites'));\n          newfavoritesFiles = favoritesFiles.filter( favoritesFile => favoritesFile.metadata.id !== response.id)\n          localStorage.setItem('favorites', JSON.stringify(newfavoritesFiles))\n          return files.metadata.name !== response.name;\n        }\n      })\n      this.props.setFileState(newFiles)\n      this.setState({starArray: newfavoritesFiles})\n    })\n  }\n  }\n\n  renameFolders = (path, id) => {\n    const newName = this.state.folderRename;\n    let newfavoritesFolders = []\n    let newPath = path.split('/')\n    newPath[newPath.length-1] = newName\n    newPath = newPath.filter(path => path !== \"\")\n    newPath = newPath.reduce((acc,currentpath) => (acc + `${currentpath}`),0)\n    console.log(newPath)\n    this.props.dbx.filesMoveV2({\n      from_path: path,\n      to_path: `/${newName}`,\n    })\n    .then(res => {\n      let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders') || \"[]\");\n      newfavoritesFolders = favoritesFolders.map(favoritesFolder => favoritesFolder.id === res.metadata.id ? {...favoritesFolder, ...res.metadata} : favoritesFolder)\n      window.localStorage.setItem('favoritesFolders', JSON.stringify(newfavoritesFolders))\n      const newFolders = [...this.props.folders];\n      const idx = newFolders.findIndex(x => x.id === id);\n      newFolders[idx] = res.metadata;\n\n      this.props.setFolderState(newFolders)\n      this.setState({starArrayFolders: newfavoritesFolders})\n    })\n  }\n\n  renameFiles = (path, id) => {\n    const newName = this.state.fileRename;\n    let newfavoritesFiles = []\n    let splitPath = path.split(\".\")\n    let fileType = splitPath[1];\n    this.props.dbx.filesMoveV2({\n      from_path: path,\n      to_path: `/${newName}.${fileType}`,\n    })\n    .then(res => {\n      const newFiles = [...this.props.files];\n      const idx = newFiles.findIndex(x => {\n        if (x['.tag'] === 'failure') {\n          return null\n        }\n        else {\n          let favoritesFiles = JSON.parse(localStorage.getItem('favorites'));\n          if(favoritesFiles !== null){\n          newfavoritesFiles = favoritesFiles.map(favoritesFile => favoritesFile.metadata.id === res.metadata.id ? {...favoritesFile, ...res} : favoritesFile)\n          window.localStorage.setItem('favorites', JSON.stringify(newfavoritesFiles))\n        }\n          return x.metadata.id === id;\n        }\n      })\n      newFiles[idx] = res.metadata;\n\n      this.props.setFileState(newFiles);\n      this.setState({starArray: newfavoritesFiles})\n    })\n  }\n\n  starFile = (file) => {\n    let newStarArray;\n    const { starArray } = this.state;\n    console.log(\"file\", file)\n    if(starArray.find(x => x.metadata.id === file.metadata.id)) {\n      newStarArray = starArray.filter(x => x.metadata.id !== file.metadata.id)\n    }else {\n      newStarArray = [...this.state.starArray, file];\n    }\n\n    let favorites = JSON.parse(localStorage.getItem('favorites'));\n    localStorage.setItem('favorites', JSON.stringify(newStarArray));\n      this.setState({\n        starArray: newStarArray\n      })\n}\n\nstarFolder = (folder) => {\n  let newstarArrayFolders;\n  const { starArrayFolders } = this.state;\n\n  if(starArrayFolders.find(y => y.id === folder.id)) {\n    newstarArrayFolders = starArrayFolders.filter(y => y.id !== folder.id)\n  }else {\n    newstarArrayFolders = [...this.state.starArrayFolders, folder];\n  }\n\n  let favoritesFolders = JSON.parse(localStorage.getItem('favoritesFolders'));\n  localStorage.setItem('favoritesFolders', JSON.stringify(newstarArrayFolders));\n    this.setState({\n      starArrayFolders: newstarArrayFolders\n    })\n  }\n\n componentDidMount() {\n  this.setState({\n    starArray: JSON.parse(window.localStorage.getItem(\"favorites\") || \"[]\"),\n    starArrayFolders: JSON.parse(window.localStorage.getItem(\"favoritesFolders\") || \"[]\"),\n  });\n}\n\n    render() {\n        const{files,folders} = this.props\n        const{URL} = this.state\n\n\n        let minaFiler = files.map(file => {\n            let image = `data:image/jpeg;base64,${file.thumbnail}`;\n            let fileName\n            let date_input\n            let datum\n            let size\n            let newSize\n            let i\n            let id\n            let path\n            let starredFiles = []\n\n\n\n            if(file[\".tag\"] === \"failure\"){\n              return null\n            }\n            else {\n              if (file.metadata) {\n                starredFiles = this.state.starArray\n                .find(x => file[\".tag\"] !== \"failure\" ?  x.metadata.id === file.metadata.id : null)\n\n                fileName = file.metadata.name;\n                date_input = new Date((file.metadata.client_modified));\n                datum = new Date(date_input).toDateString();\n\n                size = file.metadata.size;\n                i = Math.floor(Math.log(size) / Math.log(1024));\n                newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\n\n                id = file.metadata.id;\n                path = file.metadata.path_display;\n              }\n              else {\n                starredFiles = this.state.starArray\n                .find(x => file[\".tag\"] !== \"failure\" ?  x.id === file.metadata.id : null)\n\n                fileName = file.name;\n                date_input = new Date((file.client_modified));\n                datum = new Date(date_input).toDateString();\n\n                size = file.size;\n                i = Math.floor(Math.log(size) / Math.log(1024));\n                newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\n\n                id = file.id;\n                path = file.path_display;\n              }\n            }\n\n            return (\n              <tr>\n                <td>\n                <div style={{ display: 'flex' }}>\n                  <img src={file.thumbnail !== null ? image : fileImg } style={{ height: '42px', width: '42px' }} alt=\"\"/>\n                  <a onClick={() => this.downloadFile(path)} href={URL} download={fileName}>{fileName}</a>\n\n                  <span>{\" Latest change: \" + datum}</span>\n                  <span>{\" Filesize: \" + newSize}</span>\n\n                  <td className=\"dropdownList\">\n                    <DropdownOptions\n                      onDelete={this.onDelete}\n                      tag={file['.tag']}\n                      path={path}\n                      name={fileName}\n                      id={id}\n                      path_display={file.metadata.path_display}\n                      updateFileName={this.updateFileName}\n                      renameFiles={this.renameFiles}\n                      copy={this.props.copy}\n                    />\n                  </td>\n\n                </div>\n                <div className=\"tdInputDivv\" style={{display: 'flex'}}>\n                <input  checked={!!starredFiles} className=\"checkboxFiles\" type=\"checkbox\"  id={file.id} onClick={this.starFile.bind(this, file)} />\n                </div>\n                </td>\n              </tr>\n            )\n          })\n\n\n\n        let minaFolders = folders.map(folder => {\n            // render img icons to folders !\n            const type = folder['.tag'];\n            let folderThumbnail\n\n            const starredFolders = this.state.starArrayFolders\n              .find(x => x.id === folder.id);\n\n            if (type === 'folder') {\n              folderThumbnail = folderImg;\n            return (\n              <tr>\n                <td>\n                <div style={{ display: 'flex'}}>\n                <img src={folderThumbnail} style={{ height: '42px', width: '42px' }} alt=\"\"/>\n\n                <Link to={`/main${folder.path_display}`}>\n                  {folder.name}\n                </Link>\n                    <td className=\"dropdownList\">\n                      <DropdownOptions\n                        onDelete={this.onDelete}\n                        tag={folder['.tag']}\n                        path={folder.path_display}\n                        name={folder.name}\n                        id={folder.id}\n                        path_display={folder.path_display}\n                        updateFolderName={this.updateFolderName}\n                        renameFolders={this.renameFolders}\n                        copy={this.props.copy}\n                      />\n                    </td>\n                </div>\n                <div className=\"tdInputDiv\" style={{display: 'flex'}}>\n                    <input checked={!!starredFolders} className=\"checkbox\" type=\"checkbox\"  id={folder.id} onClick={this.starFolder.bind(this, folder)} />\n                    </div>\n                </td>\n              </tr>\n            )\n          }\n          })\n          let favFiles = this.state.starArray.map(favfile => {\n\n\n            let image = `data:image/jpeg;base64,${favfile.thumbnail}`;\n\n            let fileName\n            let datum\n            let date_input\n            let size\n            let newSize\n            let i\n\n            fileName = favfile.metadata.name;\n            size = favfile.metadata.size;\n            i = Math.floor(Math.log(size) / Math.log(1024));\n            newSize = (size / Math.pow(1024, i)).toFixed(2) * 1 + \"\"+['B', 'kB', 'MB', 'GB', 'TB'][i];\n            date_input = new Date((favfile.metadata.client_modified));\n            datum = new Date(date_input).toDateString();\n              return (\n                <tr>\n                  <td>\n                    <div style={{ display: 'flex' }}>\n                    <img src={favfile.thumbnail !== null ? image : fileImg} style={{ height: '42px', width: '42px' }} alt=\"\"/>\n                      <a onClick={() => this.downloadFile(favfile.metadata.path_display)} href={this.state.URL} download={favfile.metadata.name} className=\"favfile\" key={favfile.metadata.id}> {favfile.metadata.name} </a>\n                      <span>{\" Latest change: \" + datum}</span>\n                      <span>{ \" Filesize: \" + newSize}</span>\n                </div>\n                </td>\n                </tr>\n              )\n            });\n\n          let favFolders = this.state.starArrayFolders.map(favfolder => {\n            let folderName;\n            const type = favfolder['.tag'];\n            let folderThumbnail\n\n            if (type === 'folder') {\n              folderThumbnail = folderImg;\n            folderName = favfolder.name;\n              return (\n                <tr>\n                  <td>\n                    <div style={{ display: 'flex' }}>\n                      <img src={folderThumbnail} style={{ height: '42px', width: '42px' }} alt=\"\"/>\n                      <Link to={`/main${favfolder.path_display}`}>\n                        {favfolder.name}\n                      </Link>\n                </div>\n                </td>\n                </tr>\n                )\n              }\n            })\n            return(\n              <div className=\"files\">\n              <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th>Folder/file name</th>\n                    </tr>\n                </thead>\n                <tbody>\n                <h2>Folders!</h2>\n                  {minaFolders}\n\n                <h2 style={{ marginTop: '10%' }}>Files!</h2>\n                  {minaFiler}\n\n                <h2 style={{ marginTop: '10%' }} >Favorite Folders!</h2>\n                  {favFolders}\n\n                <h2 style={{ marginTop: '10%' }} >Favorite Files!</h2>\n                  {favFiles}\n\n              </tbody>\n              </table>\n          </div>\n        )\n    }\n}\n\nexport default Folders\n"]},"metadata":{},"sourceType":"module"}